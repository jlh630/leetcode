{"id":166,"fid":"166","name":"分数到小数","slug":"fraction-to-recurring-decimal","link":"https://leetcode.cn/problems/fraction-to-recurring-decimal/description/","percent":33.53301223227345,"level":"Medium","category":"algorithms","en_name":"Fraction to Recurring Decimal","cn_name":"分数到小数","totalAC":"72K","totalSubmit":"214.7K","likes":500,"dislikes":0,"desc":"<p>给定两个整数，分别表示分数的分子&nbsp;<code>numerator</code> 和分母 <code>denominator</code>，以 <strong>字符串形式返回小数</strong> 。</p>\n\n<p>如果小数部分为循环小数，则将循环的部分括在括号内。</p>\n\n<p>如果存在多个答案，只需返回 <strong>任意一个</strong> 。</p>\n\n<p>对于所有给定的输入，<strong>保证</strong> 答案字符串的长度小于 <code>10<sup>4</sup></code> 。</p>\n\n<p>&nbsp;</p>\n\n<p><strong>示例 1：</strong></p>\n\n<pre>\n<strong>输入：</strong>numerator = 1, denominator = 2\n<strong>输出：</strong>\"0.5\"\n</pre>\n\n<p><strong>示例 2：</strong></p>\n\n<pre>\n<strong>输入：</strong>numerator = 2, denominator = 1\n<strong>输出：</strong>\"2\"\n</pre>\n\n<p><strong>示例 3：</strong></p>\n\n<pre>\n<strong>输入：</strong>numerator = 4, denominator = 333\n<strong>输出：</strong>\"0.(012)\"\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ul>\n\t<li><code>-2<sup>31</sup> &lt;=&nbsp;numerator, denominator &lt;= 2<sup>31</sup> - 1</code></li>\n\t<li><code>denominator != 0</code></li>\n</ul>\n","templates":[{"value":"cpp","text":"C++","defaultCode":"class Solution {\npublic:\n    string fractionToDecimal(int numerator, int denominator) {\n\n    }\n};"},{"value":"java","text":"Java","defaultCode":"class Solution {\n    public String fractionToDecimal(int numerator, int denominator) {\n\n    }\n}"},{"value":"python","text":"Python","defaultCode":"class Solution(object):\n    def fractionToDecimal(self, numerator, denominator):\n        \"\"\"\n        :type numerator: int\n        :type denominator: int\n        :rtype: str\n        \"\"\""},{"value":"python3","text":"Python3","defaultCode":"class Solution:\n    def fractionToDecimal(self, numerator: int, denominator: int) -> str:"},{"value":"c","text":"C","defaultCode":"char* fractionToDecimal(int numerator, int denominator) {\n    \n}"},{"value":"csharp","text":"C#","defaultCode":"public class Solution {\n    public string FractionToDecimal(int numerator, int denominator) {\n\n    }\n}"},{"value":"javascript","text":"JavaScript","defaultCode":"/**\n * @param {number} numerator\n * @param {number} denominator\n * @return {string}\n */\nvar fractionToDecimal = function(numerator, denominator) {\n\n};"},{"value":"typescript","text":"TypeScript","defaultCode":"function fractionToDecimal(numerator: number, denominator: number): string {\n    \n};"},{"value":"php","text":"PHP","defaultCode":"class Solution {\n\n    /**\n     * @param Integer $numerator\n     * @param Integer $denominator\n     * @return String\n     */\n    function fractionToDecimal($numerator, $denominator) {\n\n    }\n}"},{"value":"swift","text":"Swift","defaultCode":"class Solution {\n    func fractionToDecimal(_ numerator: Int, _ denominator: Int) -> String {\n\n    }\n}"},{"value":"kotlin","text":"Kotlin","defaultCode":"class Solution {\n    fun fractionToDecimal(numerator: Int, denominator: Int): String {\n\n    }\n}"},{"value":"dart","text":"Dart","defaultCode":"class Solution {\n  String fractionToDecimal(int numerator, int denominator) {\n    \n  }\n}"},{"value":"golang","text":"Go","defaultCode":"func fractionToDecimal(numerator int, denominator int) string {\n\n}"},{"value":"ruby","text":"Ruby","defaultCode":"# @param {Integer} numerator\n# @param {Integer} denominator\n# @return {String}\ndef fraction_to_decimal(numerator, denominator)\n\nend"},{"value":"scala","text":"Scala","defaultCode":"object Solution {\n    def fractionToDecimal(numerator: Int, denominator: Int): String = {\n        \n    }\n}"},{"value":"rust","text":"Rust","defaultCode":"impl Solution {\n    pub fn fraction_to_decimal(numerator: i32, denominator: i32) -> String {\n\n    }\n}"},{"value":"racket","text":"Racket","defaultCode":"(define/contract (fraction-to-decimal numerator denominator)\n  (-> exact-integer? exact-integer? string?)\n  )"},{"value":"erlang","text":"Erlang","defaultCode":"-spec fraction_to_decimal(Numerator :: integer(), Denominator :: integer()) -> unicode:unicode_binary().\nfraction_to_decimal(Numerator, Denominator) ->\n  ."},{"value":"elixir","text":"Elixir","defaultCode":"defmodule Solution do\n  @spec fraction_to_decimal(numerator :: integer, denominator :: integer) :: String.t\n  def fraction_to_decimal(numerator, denominator) do\n    \n  end\nend"},{"value":"cangjie","text":"Cangjie","defaultCode":"class Solution {\n    func fractionToDecimal(numerator: Int64, denominator: Int64): String {\n\n    }\n}"}],"testcase":"1\n2","testable":true,"templateMeta":{"name":"fractionToDecimal","params":[{"name":"numerator","type":"integer"},{"name":"denominator","type":"integer"}],"return":{"type":"string"}}}