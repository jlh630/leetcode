{"id":371,"fid":"371","name":"两整数之和","slug":"sum-of-two-integers","link":"https://leetcode.cn/problems/sum-of-two-integers/description/","percent":62.808651980709094,"level":"Medium","category":"algorithms","en_name":"Sum of Two Integers","cn_name":"两整数之和","totalAC":"126.5K","totalSubmit":"201.3K","likes":742,"dislikes":0,"desc":"<p>给你两个整数 <code>a</code> 和 <code>b</code> ，<strong>不使用 </strong>运算符&nbsp;<code>+</code> 和&nbsp;<code>-</code>&nbsp;​​​​​​​，计算并返回两整数之和。</p>\n\n<p>&nbsp;</p>\n\n<p><strong>示例 1：</strong></p>\n\n<pre>\n<strong>输入：</strong>a = 1, b = 2\n<strong>输出：</strong>3\n</pre>\n\n<p><strong>示例 2：</strong></p>\n\n<pre>\n<strong>输入：</strong>a = 2, b = 3\n<strong>输出：</strong>5\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ul>\n\t<li><code>-1000 &lt;= a, b &lt;= 1000</code></li>\n</ul>\n","templates":[{"value":"cpp","text":"C++","defaultCode":"class Solution {\npublic:\n    int getSum(int a, int b) {\n\n    }\n};"},{"value":"java","text":"Java","defaultCode":"class Solution {\n    public int getSum(int a, int b) {\n\n    }\n}"},{"value":"python","text":"Python","defaultCode":"class Solution(object):\n    def getSum(self, a, b):\n        \"\"\"\n        :type a: int\n        :type b: int\n        :rtype: int\n        \"\"\""},{"value":"python3","text":"Python3","defaultCode":"class Solution:\n    def getSum(self, a: int, b: int) -> int:"},{"value":"c","text":"C","defaultCode":"int getSum(int a, int b) {\n    \n}"},{"value":"csharp","text":"C#","defaultCode":"public class Solution {\n    public int GetSum(int a, int b) {\n\n    }\n}"},{"value":"javascript","text":"JavaScript","defaultCode":"/**\n * @param {number} a\n * @param {number} b\n * @return {number}\n */\nvar getSum = function(a, b) {\n\n};"},{"value":"typescript","text":"TypeScript","defaultCode":"function getSum(a: number, b: number): number {\n    \n};"},{"value":"php","text":"PHP","defaultCode":"class Solution {\n\n    /**\n     * @param Integer $a\n     * @param Integer $b\n     * @return Integer\n     */\n    function getSum($a, $b) {\n\n    }\n}"},{"value":"swift","text":"Swift","defaultCode":"class Solution {\n    func getSum(_ a: Int, _ b: Int) -> Int {\n\n    }\n}"},{"value":"kotlin","text":"Kotlin","defaultCode":"class Solution {\n    fun getSum(a: Int, b: Int): Int {\n\n    }\n}"},{"value":"dart","text":"Dart","defaultCode":"class Solution {\n  int getSum(int a, int b) {\n    \n  }\n}"},{"value":"golang","text":"Go","defaultCode":"func getSum(a int, b int) int {\n\n}"},{"value":"ruby","text":"Ruby","defaultCode":"# @param {Integer} a\n# @param {Integer} b\n# @return {Integer}\ndef get_sum(a, b)\n    \nend"},{"value":"scala","text":"Scala","defaultCode":"object Solution {\n    def getSum(a: Int, b: Int): Int = {\n        \n    }\n}"},{"value":"rust","text":"Rust","defaultCode":"impl Solution {\n    pub fn get_sum(a: i32, b: i32) -> i32 {\n\n    }\n}"},{"value":"racket","text":"Racket","defaultCode":"(define/contract (get-sum a b)\n  (-> exact-integer? exact-integer? exact-integer?)\n  )"},{"value":"erlang","text":"Erlang","defaultCode":"-spec get_sum(A :: integer(), B :: integer()) -> integer().\nget_sum(A, B) ->\n  ."},{"value":"elixir","text":"Elixir","defaultCode":"defmodule Solution do\n  @spec get_sum(a :: integer, b :: integer) :: integer\n  def get_sum(a, b) do\n    \n  end\nend"}],"testcase":"1\n2","testable":true,"templateMeta":{"name":"getSum","params":[{"name":"a","type":"integer"},{"name":"b","type":"integer"}],"return":{"type":"integer"}}}