{"id":384,"fid":"384","name":"打乱数组","slug":"shuffle-an-array","link":"https://leetcode.cn/problems/shuffle-an-array/description/","percent":61.928393205517864,"level":"Medium","category":"algorithms","en_name":"Shuffle an Array","cn_name":"打乱数组","totalAC":"134.6K","totalSubmit":"217.2K","likes":353,"dislikes":0,"desc":"<p>给你一个整数数组 <code>nums</code> ，设计算法来打乱一个没有重复元素的数组。打乱后，数组的所有排列应该是&nbsp;<strong>等可能</strong>&nbsp;的。</p>\n\n<p>实现 <code>Solution</code> class:</p>\n\n<ul>\n\t<li><code>Solution(int[] nums)</code> 使用整数数组 <code>nums</code> 初始化对象</li>\n\t<li><code>int[] reset()</code> 重设数组到它的初始状态并返回</li>\n\t<li><code>int[] shuffle()</code> 返回数组随机打乱后的结果</li>\n</ul>\n\n<p>&nbsp;</p>\n\n<p><strong>示例 1：</strong></p>\n\n<pre>\n<strong>输入</strong>\n[\"Solution\", \"shuffle\", \"reset\", \"shuffle\"]\n[[[1, 2, 3]], [], [], []]\n<strong>输出</strong>\n[null, [3, 1, 2], [1, 2, 3], [1, 3, 2]]\n\n<strong>解释</strong>\nSolution solution = new Solution([1, 2, 3]);\nsolution.shuffle();    // 打乱数组 [1,2,3] 并返回结果。任何 [1,2,3]的排列返回的概率应该相同。例如，返回 [3, 1, 2]\nsolution.reset();      // 重设数组到它的初始状态 [1, 2, 3] 。返回 [1, 2, 3]\nsolution.shuffle();    // 随机返回数组 [1, 2, 3] 打乱后的结果。例如，返回 [1, 3, 2]\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= nums.length &lt;= 50</code></li>\n\t<li><code>-10<sup>6</sup> &lt;= nums[i] &lt;= 10<sup>6</sup></code></li>\n\t<li><code>nums</code> 中的所有元素都是 <strong>唯一的</strong></li>\n\t<li>最多可以调用 <code>10<sup>4</sup></code> 次 <code>reset</code> 和 <code>shuffle</code></li>\n</ul>\n","templates":[{"value":"cpp","text":"C++","defaultCode":"class Solution {\npublic:\n    Solution(vector<int>& nums) {\n\n    }\n    \n    vector<int> reset() {\n\n    }\n    \n    vector<int> shuffle() {\n\n    }\n};\n\n/**\n * Your Solution object will be instantiated and called as such:\n * Solution* obj = new Solution(nums);\n * vector<int> param_1 = obj->reset();\n * vector<int> param_2 = obj->shuffle();\n */"},{"value":"java","text":"Java","defaultCode":"class Solution {\n\n    public Solution(int[] nums) {\n\n    }\n    \n    public int[] reset() {\n\n    }\n    \n    public int[] shuffle() {\n\n    }\n}\n\n/**\n * Your Solution object will be instantiated and called as such:\n * Solution obj = new Solution(nums);\n * int[] param_1 = obj.reset();\n * int[] param_2 = obj.shuffle();\n */"},{"value":"python","text":"Python","defaultCode":"class Solution(object):\n\n    def __init__(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        \"\"\"\n\n\n    def reset(self):\n        \"\"\"\n        :rtype: List[int]\n        \"\"\"\n\n\n    def shuffle(self):\n        \"\"\"\n        :rtype: List[int]\n        \"\"\"\n\n\n\n# Your Solution object will be instantiated and called as such:\n# obj = Solution(nums)\n# param_1 = obj.reset()\n# param_2 = obj.shuffle()"},{"value":"python3","text":"Python3","defaultCode":"class Solution:\n\n    def __init__(self, nums: List[int]):\n\n\n    def reset(self) -> List[int]:\n\n\n    def shuffle(self) -> List[int]:\n\n\n\n# Your Solution object will be instantiated and called as such:\n# obj = Solution(nums)\n# param_1 = obj.reset()\n# param_2 = obj.shuffle()"},{"value":"c","text":"C","defaultCode":"\n\n\ntypedef struct {\n    \n} Solution;\n\n\nSolution* solutionCreate(int* nums, int numsSize) {\n    \n}\n\nint* solutionReset(Solution* obj, int* retSize) {\n    \n}\n\nint* solutionShuffle(Solution* obj, int* retSize) {\n    \n}\n\nvoid solutionFree(Solution* obj) {\n    \n}\n\n/**\n * Your Solution struct will be instantiated and called as such:\n * Solution* obj = solutionCreate(nums, numsSize);\n * int* param_1 = solutionReset(obj, retSize);\n \n * int* param_2 = solutionShuffle(obj, retSize);\n \n * solutionFree(obj);\n*/"},{"value":"csharp","text":"C#","defaultCode":"public class Solution {\n\n    public Solution(int[] nums) {\n\n    }\n    \n    public int[] Reset() {\n\n    }\n    \n    public int[] Shuffle() {\n\n    }\n}\n\n/**\n * Your Solution object will be instantiated and called as such:\n * Solution obj = new Solution(nums);\n * int[] param_1 = obj.Reset();\n * int[] param_2 = obj.Shuffle();\n */"},{"value":"javascript","text":"JavaScript","defaultCode":"/**\n * @param {number[]} nums\n */\nvar Solution = function(nums) {\n\n};\n\n/**\n * @return {number[]}\n */\nSolution.prototype.reset = function() {\n\n};\n\n/**\n * @return {number[]}\n */\nSolution.prototype.shuffle = function() {\n\n};\n\n/**\n * Your Solution object will be instantiated and called as such:\n * var obj = new Solution(nums)\n * var param_1 = obj.reset()\n * var param_2 = obj.shuffle()\n */"},{"value":"typescript","text":"TypeScript","defaultCode":"class Solution {\n    constructor(nums: number[]) {\n        \n    }\n\n    reset(): number[] {\n        \n    }\n\n    shuffle(): number[] {\n        \n    }\n}\n\n/**\n * Your Solution object will be instantiated and called as such:\n * var obj = new Solution(nums)\n * var param_1 = obj.reset()\n * var param_2 = obj.shuffle()\n */"},{"value":"php","text":"PHP","defaultCode":"class Solution {\n    /**\n     * @param Integer[] $nums\n     */\n    function __construct($nums) {\n\n    }\n\n    /**\n     * @return Integer[]\n     */\n    function reset() {\n\n    }\n\n    /**\n     * @return Integer[]\n     */\n    function shuffle() {\n\n    }\n}\n\n/**\n * Your Solution object will be instantiated and called as such:\n * $obj = Solution($nums);\n * $ret_1 = $obj->reset();\n * $ret_2 = $obj->shuffle();\n */"},{"value":"swift","text":"Swift","defaultCode":"\nclass Solution {\n\n    init(_ nums: [Int]) {\n\n    }\n    \n    func reset() -> [Int] {\n\n    }\n    \n    func shuffle() -> [Int] {\n\n    }\n}\n\n/**\n * Your Solution object will be instantiated and called as such:\n * let obj = Solution(nums)\n * let ret_1: [Int] = obj.reset()\n * let ret_2: [Int] = obj.shuffle()\n */"},{"value":"kotlin","text":"Kotlin","defaultCode":"class Solution(nums: IntArray) {\n\n    fun reset(): IntArray {\n\n    }\n\n    fun shuffle(): IntArray {\n\n    }\n\n}\n\n/**\n * Your Solution object will be instantiated and called as such:\n * var obj = Solution(nums)\n * var param_1 = obj.reset()\n * var param_2 = obj.shuffle()\n */"},{"value":"dart","text":"Dart","defaultCode":"class Solution {\n\n  Solution(List<int> nums) {\n    \n  }\n  \n  List<int> reset() {\n    \n  }\n  \n  List<int> shuffle() {\n    \n  }\n}\n\n/**\n * Your Solution object will be instantiated and called as such:\n * Solution obj = Solution(nums);\n * List<int> param1 = obj.reset();\n * List<int> param2 = obj.shuffle();\n */"},{"value":"golang","text":"Go","defaultCode":"type Solution struct {\n\n}\n\n\nfunc Constructor(nums []int) Solution {\n\n}\n\n\nfunc (this *Solution) Reset() []int {\n\n}\n\n\nfunc (this *Solution) Shuffle() []int {\n\n}\n\n\n/**\n * Your Solution object will be instantiated and called as such:\n * obj := Constructor(nums);\n * param_1 := obj.Reset();\n * param_2 := obj.Shuffle();\n */"},{"value":"ruby","text":"Ruby","defaultCode":"class Solution\n\n=begin\n    :type nums: Integer[]\n=end\n    def initialize(nums)\n        \n    end\n\n\n=begin\n    :rtype: Integer[]\n=end\n    def reset()\n        \n    end\n\n\n=begin\n    :rtype: Integer[]\n=end\n    def shuffle()\n        \n    end\n\n\nend\n\n# Your Solution object will be instantiated and called as such:\n# obj = Solution.new(nums)\n# param_1 = obj.reset()\n# param_2 = obj.shuffle()"},{"value":"scala","text":"Scala","defaultCode":"class Solution(_nums: Array[Int]) {\n\n    def reset(): Array[Int] = {\n        \n    }\n\n    def shuffle(): Array[Int] = {\n        \n    }\n\n}\n\n/**\n * Your Solution object will be instantiated and called as such:\n * val obj = new Solution(nums)\n * val param_1 = obj.reset()\n * val param_2 = obj.shuffle()\n */"},{"value":"rust","text":"Rust","defaultCode":"struct Solution {\n\n}\n\n\n/**\n * `&self` means the method takes an immutable reference.\n * If you need a mutable reference, change it to `&mut self` instead.\n */\nimpl Solution {\n\n    fn new(nums: Vec<i32>) -> Self {\n\n    }\n    \n    fn reset(&self) -> Vec<i32> {\n\n    }\n    \n    fn shuffle(&self) -> Vec<i32> {\n\n    }\n}\n\n/**\n * Your Solution object will be instantiated and called as such:\n * let obj = Solution::new(nums);\n * let ret_1: Vec<i32> = obj.reset();\n * let ret_2: Vec<i32> = obj.shuffle();\n */"},{"value":"racket","text":"Racket","defaultCode":"(define solution%\n  (class object%\n    (super-new)\n    \n    ; nums : (listof exact-integer?)\n    (init-field\n      nums)\n    \n    ; reset : -> (listof exact-integer?)\n    (define/public (reset)\n      )\n    ; shuffle : -> (listof exact-integer?)\n    (define/public (shuffle)\n      )))\n\n;; Your solution% object will be instantiated and called as such:\n;; (define obj (new solution% [nums nums]))\n;; (define param_1 (send obj reset))\n;; (define param_2 (send obj shuffle))"},{"value":"erlang","text":"Erlang","defaultCode":"-spec solution_init_(Nums :: [integer()]) -> any().\nsolution_init_(Nums) ->\n  .\n\n-spec solution_reset() -> [integer()].\nsolution_reset() ->\n  .\n\n-spec solution_shuffle() -> [integer()].\nsolution_shuffle() ->\n  .\n\n\n%% Your functions will be called as such:\n%% solution_init_(Nums),\n%% Param_1 = solution_reset(),\n%% Param_2 = solution_shuffle(),\n\n%% solution_init_ will be called before every test case, in which you can do some necessary initializations."},{"value":"elixir","text":"Elixir","defaultCode":"defmodule Solution do\n  @spec init_(nums :: [integer]) :: any\n  def init_(nums) do\n    \n  end\n\n  @spec reset() :: [integer]\n  def reset() do\n    \n  end\n\n  @spec shuffle() :: [integer]\n  def shuffle() do\n    \n  end\nend\n\n# Your functions will be called as such:\n# Solution.init_(nums)\n# param_1 = Solution.reset()\n# param_2 = Solution.shuffle()\n\n# Solution.init_ will be called before every test case, in which you can do some necessary initializations."}],"testcase":"[\"Solution\",\"shuffle\",\"reset\",\"shuffle\"]\n[[[1,2,3]],[],[],[]]","testable":true,"templateMeta":{"classname":"Solution","constructor":{"params":[{"type":"integer[]","name":"nums"}]},"methods":[{"params":[],"name":"reset","return":{"type":"integer[]"}},{"params":[],"return":{"type":"integer[]"},"name":"shuffle"}],"return":{"type":"boolean"},"systemdesign":true}}