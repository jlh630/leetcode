{"id":949,"fid":"913","name":"猫和老鼠","slug":"cat-and-mouse","link":"https://leetcode.cn/problems/cat-and-mouse/description/","percent":51.724327746126114,"level":"Hard","category":"algorithms","en_name":"Cat and Mouse","cn_name":"猫和老鼠","totalAC":"18.8K","totalSubmit":"36.4K","likes":317,"dislikes":0,"desc":"<p>两位玩家分别扮演猫和老鼠，在一张 <strong>无向</strong> 图上进行游戏，两人轮流行动。</p>\n\n<p>图的形式是：<code>graph[a]</code> 是一个列表，由满足&nbsp;<code>ab</code> 是图中的一条边的所有节点 <code>b</code> 组成。</p>\n\n<p>老鼠从节点 <code>1</code> 开始，第一个出发；猫从节点 <code>2</code> 开始，第二个出发。在节点 <code>0</code> 处有一个洞。</p>\n\n<p>在每个玩家的行动中，他们 <strong>必须</strong> 沿着图中与所在当前位置连通的一条边移动。例如，如果老鼠在节点 <code>1</code> ，那么它必须移动到 <code>graph[1]</code> 中的任一节点。</p>\n\n<p>此外，猫无法移动到洞中（节点 <code>0</code>）。</p>\n\n<p>然后，游戏在出现以下三种情形之一时结束：</p>\n\n<ul>\n\t<li>如果猫和老鼠出现在同一个节点，猫获胜。</li>\n\t<li>如果老鼠到达洞中，老鼠获胜。</li>\n\t<li>如果某一位置重复出现（即，玩家的位置和移动顺序都与上一次行动相同），游戏平局。</li>\n</ul>\n\n<p>给你一张图 <code>graph</code> ，并假设两位玩家都都以最佳状态参与游戏：</p>\n\n<ul>\n\t<li>如果老鼠获胜，则返回&nbsp;<code>1</code>；</li>\n\t<li>如果猫获胜，则返回 <code>2</code>；</li>\n\t<li>如果平局，则返回 <code>0</code> 。</li>\n</ul>\n&nbsp;\n\n<p><strong class=\"example\">示例 1：</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2020/11/17/cat1.jpg\" style=\"width: 300px; height: 300px;\" />\n<pre>\n<strong>输入：</strong>graph = [[2,5],[3],[0,4,5],[1,4,5],[2,3],[0,2,3]]\n<strong>输出：</strong>0\n</pre>\n\n<p><strong class=\"example\">示例 2：</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2020/11/17/cat2.jpg\" style=\"width: 200px; height: 200px;\" />\n<pre>\n<strong>输入：</strong>graph = [[1,3],[0],[3],[0,2]]\n<strong>输出：</strong>1\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ul>\n\t<li><code>3 &lt;= graph.length &lt;= 50</code></li>\n\t<li><code>1&nbsp;&lt;= graph[i].length &lt; graph.length</code></li>\n\t<li><code>0 &lt;= graph[i][j] &lt; graph.length</code></li>\n\t<li><code>graph[i][j] != i</code></li>\n\t<li><code>graph[i]</code> 互不相同</li>\n\t<li>猫和老鼠在游戏中总是可以移动</li>\n</ul>\n","templates":[{"value":"cpp","text":"C++","defaultCode":"class Solution {\npublic:\n    int catMouseGame(vector<vector<int>>& graph) {\n\n    }\n};"},{"value":"java","text":"Java","defaultCode":"class Solution {\n    public int catMouseGame(int[][] graph) {\n\n    }\n}"},{"value":"python","text":"Python","defaultCode":"class Solution(object):\n    def catMouseGame(self, graph):\n        \"\"\"\n        :type graph: List[List[int]]\n        :rtype: int\n        \"\"\""},{"value":"python3","text":"Python3","defaultCode":"class Solution:\n    def catMouseGame(self, graph: List[List[int]]) -> int:"},{"value":"c","text":"C","defaultCode":"int catMouseGame(int** graph, int graphSize, int* graphColSize) {\n    \n}"},{"value":"csharp","text":"C#","defaultCode":"public class Solution {\n    public int CatMouseGame(int[][] graph) {\n\n    }\n}"},{"value":"javascript","text":"JavaScript","defaultCode":"/**\n * @param {number[][]} graph\n * @return {number}\n */\nvar catMouseGame = function(graph) {\n\n};"},{"value":"typescript","text":"TypeScript","defaultCode":"function catMouseGame(graph: number[][]): number {\n    \n};"},{"value":"php","text":"PHP","defaultCode":"class Solution {\n\n    /**\n     * @param Integer[][] $graph\n     * @return Integer\n     */\n    function catMouseGame($graph) {\n\n    }\n}"},{"value":"swift","text":"Swift","defaultCode":"class Solution {\n    func catMouseGame(_ graph: [[Int]]) -> Int {\n\n    }\n}"},{"value":"kotlin","text":"Kotlin","defaultCode":"class Solution {\n    fun catMouseGame(graph: Array<IntArray>): Int {\n\n    }\n}"},{"value":"dart","text":"Dart","defaultCode":"class Solution {\n  int catMouseGame(List<List<int>> graph) {\n    \n  }\n}"},{"value":"golang","text":"Go","defaultCode":"func catMouseGame(graph [][]int) int {\n\n}"},{"value":"ruby","text":"Ruby","defaultCode":"# @param {Integer[][]} graph\n# @return {Integer}\ndef cat_mouse_game(graph)\n    \nend"},{"value":"scala","text":"Scala","defaultCode":"object Solution {\n    def catMouseGame(graph: Array[Array[Int]]): Int = {\n        \n    }\n}"},{"value":"rust","text":"Rust","defaultCode":"impl Solution {\n    pub fn cat_mouse_game(graph: Vec<Vec<i32>>) -> i32 {\n\n    }\n}"},{"value":"racket","text":"Racket","defaultCode":"(define/contract (cat-mouse-game graph)\n  (-> (listof (listof exact-integer?)) exact-integer?)\n  )"},{"value":"erlang","text":"Erlang","defaultCode":"-spec cat_mouse_game(Graph :: [[integer()]]) -> integer().\ncat_mouse_game(Graph) ->\n  ."},{"value":"elixir","text":"Elixir","defaultCode":"defmodule Solution do\n  @spec cat_mouse_game(graph :: [[integer]]) :: integer\n  def cat_mouse_game(graph) do\n    \n  end\nend"},{"value":"cangjie","text":"Cangjie","defaultCode":"class Solution {\n    func catMouseGame(graph: Array<Array<Int64>>): Int64 {\n\n    }\n}"}],"testcase":"[[2,5],[3],[0,4,5],[1,4,5],[2,3],[0,2,3]]","testable":true,"templateMeta":{"name":"catMouseGame","params":[{"name":"graph","type":"integer[][]"}],"return":{"type":"integer"}}}