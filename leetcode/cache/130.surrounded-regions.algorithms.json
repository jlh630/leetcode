{"id":130,"fid":"130","name":"被围绕的区域","slug":"surrounded-regions","link":"https://leetcode.cn/problems/surrounded-regions/description/","percent":46.58323820121961,"level":"Medium","category":"algorithms","en_name":"Surrounded Regions","cn_name":"被围绕的区域","totalAC":"295.6K","totalSubmit":"633.6K","likes":1142,"dislikes":0,"desc":"<p>给你一个 <code>m x n</code> 的矩阵 <code>board</code> ，由若干字符 <code>'X'</code> 和 <code>'O'</code>&nbsp;组成，<strong>捕获</strong> 所有 <strong>被围绕的区域</strong>：</p>\n\n<ul>\n\t<li><strong>连接：</strong>一个单元格与水平或垂直方向上相邻的单元格连接。</li>\n\t<li><strong>区域：连接所有&nbsp;</strong><code>'O'</code>&nbsp;的单元格来形成一个区域。</li>\n\t<li><strong>围绕：</strong>如果您可以用&nbsp;<code>'X'</code>&nbsp;单元格 <strong>连接这个区域</strong>，并且区域中没有任何单元格位于&nbsp;<code>board</code> 边缘，则该区域被 <code>'X'</code>&nbsp;单元格围绕。</li>\n</ul>\n\n<p>通过将输入矩阵&nbsp;<code>board</code> 中的所有 <code>'O'</code>&nbsp;替换为 <code>'X'</code> 来 <strong>捕获被围绕的区域</strong>。</p>\n\n<div class=\"original__bRMd\">\n<div>\n<p>&nbsp;</p>\n\n<p><strong class=\"example\">示例 1：</strong></p>\n\n<div class=\"example-block\">\n<p><strong>输入：</strong><span class=\"example-io\">board = [[\"X\",\"X\",\"X\",\"X\"],[\"X\",\"O\",\"O\",\"X\"],[\"X\",\"X\",\"O\",\"X\"],[\"X\",\"O\",\"X\",\"X\"]]</span></p>\n\n<p><b>输出：</b><span class=\"example-io\">[[\"X\",\"X\",\"X\",\"X\"],[\"X\",\"X\",\"X\",\"X\"],[\"X\",\"X\",\"X\",\"X\"],[\"X\",\"O\",\"X\",\"X\"]]</span></p>\n\n<p><strong>解释：</strong></p>\n<img alt=\"\" src=\"https://pic.leetcode.cn/1718167191-XNjUTG-image.png\" style=\"width: 367px; height: 158px;\" />\n<p>在上图中，底部的区域没有被捕获，因为它在 board 的边缘并且不能被围绕。</p>\n</div>\n\n<p><strong class=\"example\">示例 2：</strong></p>\n\n<div class=\"example-block\">\n<p><strong>输入：</strong><span class=\"example-io\">board = [[\"X\"]]</span></p>\n\n<p><strong>输出：</strong><span class=\"example-io\">[[\"X\"]]</span></p>\n</div>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ul>\n\t<li><code>m == board.length</code></li>\n\t<li><code>n == board[i].length</code></li>\n\t<li><code>1 &lt;= m, n &lt;= 200</code></li>\n\t<li><code>board[i][j]</code> 为 <code>'X'</code> 或 <code>'O'</code></li>\n</ul>\n</div>\n</div>\n","templates":[{"value":"cpp","text":"C++","defaultCode":"class Solution {\npublic:\n    void solve(vector<vector<char>>& board) {\n\n    }\n};"},{"value":"java","text":"Java","defaultCode":"class Solution {\n    public void solve(char[][] board) {\n\n    }\n}"},{"value":"python","text":"Python","defaultCode":"class Solution(object):\n    def solve(self, board):\n        \"\"\"\n        :type board: List[List[str]]\n        :rtype: None Do not return anything, modify board in-place instead.\n        \"\"\""},{"value":"python3","text":"Python3","defaultCode":"class Solution:\n    def solve(self, board: List[List[str]]) -> None:\n        \"\"\"\n        Do not return anything, modify board in-place instead.\n        \"\"\""},{"value":"c","text":"C","defaultCode":"void solve(char** board, int boardSize, int* boardColSize) {\n    \n}"},{"value":"csharp","text":"C#","defaultCode":"public class Solution {\n    public void Solve(char[][] board) {\n\n    }\n}"},{"value":"javascript","text":"JavaScript","defaultCode":"/**\n * @param {character[][]} board\n * @return {void} Do not return anything, modify board in-place instead.\n */\nvar solve = function(board) {\n\n};"},{"value":"typescript","text":"TypeScript","defaultCode":"/**\n Do not return anything, modify board in-place instead.\n */\nfunction solve(board: string[][]): void {\n    \n};"},{"value":"php","text":"PHP","defaultCode":"class Solution {\n\n    /**\n     * @param String[][] $board\n     * @return NULL\n     */\n    function solve(&$board) {\n\n    }\n}"},{"value":"swift","text":"Swift","defaultCode":"class Solution {\n    func solve(_ board: inout [[Character]]) {\n\n    }\n}"},{"value":"kotlin","text":"Kotlin","defaultCode":"class Solution {\n    fun solve(board: Array<CharArray>): Unit {\n\n    }\n}"},{"value":"dart","text":"Dart","defaultCode":"class Solution {\n  void solve(List<List<String>> board) {\n    \n  }\n}"},{"value":"golang","text":"Go","defaultCode":"func solve(board [][]byte)  {\n\n}"},{"value":"ruby","text":"Ruby","defaultCode":"# @param {Character[][]} board\n# @return {Void} Do not return anything, modify board in-place instead.\ndef solve(board)\n\nend"},{"value":"scala","text":"Scala","defaultCode":"object Solution {\n    def solve(board: Array[Array[Char]]): Unit = {\n        \n    }\n}"},{"value":"rust","text":"Rust","defaultCode":"impl Solution {\n    pub fn solve(board: &mut Vec<Vec<char>>) {\n\n    }\n}"},{"value":"racket","text":"Racket","defaultCode":"(define/contract (solve board)\n  (-> (listof (listof char?)) void?)\n\n  )"}],"testcase":"[[\"X\",\"X\",\"X\",\"X\"],[\"X\",\"O\",\"O\",\"X\"],[\"X\",\"X\",\"O\",\"X\"],[\"X\",\"O\",\"X\",\"X\"]]","testable":true,"templateMeta":{"name":"solve","params":[{"name":"board","type":"character[][]"}],"return":{"type":"void"},"output":{"paramindex":0}}}