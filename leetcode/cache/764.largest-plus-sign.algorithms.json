{"id":769,"fid":"764","name":"最大加号标志","slug":"largest-plus-sign","link":"https://leetcode.cn/problems/largest-plus-sign/description/","percent":54.316022409947486,"level":"Medium","category":"algorithms","en_name":"Largest Plus Sign","cn_name":"最大加号标志","totalAC":"30.9K","totalSubmit":"56.9K","likes":221,"dislikes":0,"desc":"<p>在一个 <code>n x n</code> 的矩阵&nbsp;<code>grid</code>&nbsp;中，除了在数组&nbsp;<code>mines</code>&nbsp;中给出的元素为&nbsp;<code>0</code>，其他每个元素都为&nbsp;<code>1</code>。<code>mines[i] = [x<sub>i</sub>, y<sub>i</sub>]</code>表示&nbsp;<code>grid[x<sub>i</sub>][y<sub>i</sub>] == 0</code></p>\n\n<p>返回 <em>&nbsp;</em><code>grid</code><em> 中包含&nbsp;<code>1</code>&nbsp;的最大的 <strong>轴对齐</strong> 加号标志的阶数</em> 。如果未找到加号标志，则返回 <code>0</code> 。</p>\n\n<p>一个&nbsp;<code>k</code>&nbsp;阶由&nbsp;<em><code>1</code></em>&nbsp;组成的 <strong>“轴对称”加号标志</strong> 具有中心网格&nbsp;<code>grid[r][c] == 1</code>&nbsp;，以及4个从中心向上、向下、向左、向右延伸，长度为&nbsp;<code>k-1</code>，由&nbsp;<code>1</code>&nbsp;组成的臂。注意，只有加号标志的所有网格要求为 <code>1</code> ，别的网格可能为 <code>0</code> 也可能为 <code>1</code> 。</p>\n\n<p>&nbsp;</p>\n\n<p><strong>示例 1：</strong></p>\n\n<p><img src=\"https://assets.leetcode.com/uploads/2021/06/13/plus1-grid.jpg\" /></p>\n\n<pre>\n<strong>输入:</strong> n = 5, mines = [[4, 2]]\n<strong>输出:</strong> 2\n<strong>解释: </strong>在上面的网格中，最大加号标志的阶只能是2。一个标志已在图中标出。\n</pre>\n\n<p><strong>示例 2：</strong></p>\n\n<p><img src=\"https://assets.leetcode.com/uploads/2021/06/13/plus2-grid.jpg\" /></p>\n\n<pre>\n<strong>输入:</strong> n = 1, mines = [[0, 0]]\n<strong>输出:</strong> 0\n<strong>解释: </strong>没有加号标志，返回 0 。\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= n &lt;= 500</code></li>\n\t<li><code>1 &lt;= mines.length &lt;= 5000</code></li>\n\t<li><code>0 &lt;= x<sub>i</sub>, y<sub>i</sub>&nbsp;&lt; n</code></li>\n\t<li>每一对&nbsp;<code>(x<sub>i</sub>, y<sub>i</sub>)</code>&nbsp;都 <strong>不重复</strong>​​​​​​​</li>\n</ul>\n","templates":[{"value":"cpp","text":"C++","defaultCode":"class Solution {\npublic:\n    int orderOfLargestPlusSign(int n, vector<vector<int>>& mines) {\n\n    }\n};"},{"value":"java","text":"Java","defaultCode":"class Solution {\n    public int orderOfLargestPlusSign(int n, int[][] mines) {\n\n    }\n}"},{"value":"python","text":"Python","defaultCode":"class Solution(object):\n    def orderOfLargestPlusSign(self, n, mines):\n        \"\"\"\n        :type n: int\n        :type mines: List[List[int]]\n        :rtype: int\n        \"\"\""},{"value":"python3","text":"Python3","defaultCode":"class Solution:\n    def orderOfLargestPlusSign(self, n: int, mines: List[List[int]]) -> int:"},{"value":"c","text":"C","defaultCode":"int orderOfLargestPlusSign(int n, int** mines, int minesSize, int* minesColSize) {\n    \n}"},{"value":"csharp","text":"C#","defaultCode":"public class Solution {\n    public int OrderOfLargestPlusSign(int n, int[][] mines) {\n\n    }\n}"},{"value":"javascript","text":"JavaScript","defaultCode":"/**\n * @param {number} n\n * @param {number[][]} mines\n * @return {number}\n */\nvar orderOfLargestPlusSign = function(n, mines) {\n\n};"},{"value":"typescript","text":"TypeScript","defaultCode":"function orderOfLargestPlusSign(n: number, mines: number[][]): number {\n    \n};"},{"value":"php","text":"PHP","defaultCode":"class Solution {\n\n    /**\n     * @param Integer $n\n     * @param Integer[][] $mines\n     * @return Integer\n     */\n    function orderOfLargestPlusSign($n, $mines) {\n\n    }\n}"},{"value":"swift","text":"Swift","defaultCode":"class Solution {\n    func orderOfLargestPlusSign(_ n: Int, _ mines: [[Int]]) -> Int {\n\n    }\n}"},{"value":"kotlin","text":"Kotlin","defaultCode":"class Solution {\n    fun orderOfLargestPlusSign(n: Int, mines: Array<IntArray>): Int {\n\n    }\n}"},{"value":"dart","text":"Dart","defaultCode":"class Solution {\n  int orderOfLargestPlusSign(int n, List<List<int>> mines) {\n    \n  }\n}"},{"value":"golang","text":"Go","defaultCode":"func orderOfLargestPlusSign(n int, mines [][]int) int {\n\n}"},{"value":"ruby","text":"Ruby","defaultCode":"# @param {Integer} n\n# @param {Integer[][]} mines\n# @return {Integer}\ndef order_of_largest_plus_sign(n, mines)\n\nend"},{"value":"scala","text":"Scala","defaultCode":"object Solution {\n    def orderOfLargestPlusSign(n: Int, mines: Array[Array[Int]]): Int = {\n\n    }\n}"},{"value":"rust","text":"Rust","defaultCode":"impl Solution {\n    pub fn order_of_largest_plus_sign(n: i32, mines: Vec<Vec<i32>>) -> i32 {\n\n    }\n}"},{"value":"racket","text":"Racket","defaultCode":"(define/contract (order-of-largest-plus-sign n mines)\n  (-> exact-integer? (listof (listof exact-integer?)) exact-integer?)\n  )"},{"value":"erlang","text":"Erlang","defaultCode":"-spec order_of_largest_plus_sign(N :: integer(), Mines :: [[integer()]]) -> integer().\norder_of_largest_plus_sign(N, Mines) ->\n  ."},{"value":"elixir","text":"Elixir","defaultCode":"defmodule Solution do\n  @spec order_of_largest_plus_sign(n :: integer, mines :: [[integer]]) :: integer\n  def order_of_largest_plus_sign(n, mines) do\n    \n  end\nend"}],"testcase":"5\n[[4,2]]","testable":true,"templateMeta":{"name":"orderOfLargestPlusSign","params":[{"name":"n","type":"integer"},{"name":"mines","type":"integer[][]"}],"return":{"type":"integer"}}}