{"id":12,"fid":"12","name":"整数转罗马数字","slug":"integer-to-roman","link":"https://leetcode.cn/problems/integer-to-roman/description/","percent":67.44384196170331,"level":"Medium","category":"algorithms","en_name":"Integer to Roman","cn_name":"整数转罗马数字","totalAC":"494.5K","totalSubmit":"732.5K","likes":1310,"dislikes":0,"desc":"<p>七个不同的符号代表罗马数字，其值如下：</p>\n\n<table>\n\t<thead>\n\t\t<tr>\n\t\t\t<th>符号</th>\n\t\t\t<th>值</th>\n\t\t</tr>\n\t</thead>\n\t<tbody>\n\t\t<tr>\n\t\t\t<td>I</td>\n\t\t\t<td>1</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>V</td>\n\t\t\t<td>5</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>X</td>\n\t\t\t<td>10</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>L</td>\n\t\t\t<td>50</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>C</td>\n\t\t\t<td>100</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>D</td>\n\t\t\t<td>500</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>M</td>\n\t\t\t<td>1000</td>\n\t\t</tr>\n\t</tbody>\n</table>\n\n<p>罗马数字是通过添加从最高到最低的小数位值的转换而形成的。将小数位值转换为罗马数字有以下规则：</p>\n\n<ul>\n\t<li>如果该值不是以 4 或 9 开头，请选择可以从输入中减去的最大值的符号，将该符号附加到结果，减去其值，然后将其余部分转换为罗马数字。</li>\n\t<li>如果该值以 4 或 9 开头，使用 <strong>减法形式</strong>，表示从以下符号中减去一个符号，例如&nbsp;4 是 5 (<code>V</code>) 减 1 (<code>I</code>): <code>IV</code>&nbsp;，9 是 10 (<code>X</code>) 减&nbsp;1 (<code>I</code>)：<code>IX</code>。仅使用以下减法形式：4 (<code>IV</code>)，9 (<code>IX</code>)，40 (<code>XL</code>)，90 (<code>XC</code>)，400 (<code>CD</code>) 和&nbsp;900 (<code>CM</code>)。</li>\n\t<li>只有 10 的次方（<code>I</code>, <code>X</code>, <code>C</code>, <code>M</code>）最多可以连续附加 3 次以代表 10 的倍数。你不能多次附加&nbsp;5&nbsp;(<code>V</code>)，50 (<code>L</code>) 或 500 (<code>D</code>)。如果需要将符号附加4次，请使用 <strong>减法形式</strong>。</li>\n</ul>\n\n<p>给定一个整数，将其转换为罗马数字。</p>\n\n<p>&nbsp;</p>\n\n<p><strong class=\"example\">示例 1：</strong></p>\n\n<div class=\"example-block\">\n<p><strong>输入：</strong><span class=\"example-io\">num = 3749</span></p>\n\n<p><strong>输出：</strong>&nbsp;<span class=\"example-io\">\"MMMDCCXLIX\"</span></p>\n\n<p><strong>解释：</strong></p>\n\n<pre>\n3000 = MMM 由于 1000 (M) + 1000 (M) + 1000 (M)\n 700 = DCC 由于 500 (D) + 100 (C) + 100 (C)\n  40 = XL 由于 50 (L) 减 10 (X)\n   9 = IX 由于 10 (X) 减 1 (I)\n注意：49 不是 50 (L) 减 1 (I) 因为转换是基于小数位\n</pre>\n</div>\n\n<p><strong class=\"example\">示例 2：</strong></p>\n\n<div class=\"example-block\">\n<p><strong>输入：</strong><span class=\"example-io\">num = 58</span></p>\n\n<p><strong>输出：</strong><span class=\"example-io\">\"LVIII\"</span></p>\n\n<p><strong>解释：</strong></p>\n\n<pre>\n50 = L\n 8 = VIII\n</pre>\n</div>\n\n<p><strong class=\"example\">示例 3：</strong></p>\n\n<div class=\"example-block\">\n<p><strong>输入：</strong><span class=\"example-io\">num = 1994</span></p>\n\n<p><strong>输出：</strong><span class=\"example-io\">\"MCMXCIV\"</span></p>\n\n<p><strong>解释：</strong></p>\n\n<pre>\n1000 = M\n 900 = CM\n  90 = XC\n   4 = IV\n</pre>\n</div>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= num &lt;= 3999</code></li>\n</ul>\n","templates":[{"value":"cpp","text":"C++","defaultCode":"class Solution {\npublic:\n    string intToRoman(int num) {\n\n    }\n};"},{"value":"java","text":"Java","defaultCode":"class Solution {\n    public String intToRoman(int num) {\n\n    }\n}"},{"value":"python","text":"Python","defaultCode":"class Solution(object):\n    def intToRoman(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: str\n        \"\"\""},{"value":"python3","text":"Python3","defaultCode":"class Solution:\n    def intToRoman(self, num: int) -> str:"},{"value":"c","text":"C","defaultCode":"char* intToRoman(int num) {\n    \n}"},{"value":"csharp","text":"C#","defaultCode":"public class Solution {\n    public string IntToRoman(int num) {\n\n    }\n}"},{"value":"javascript","text":"JavaScript","defaultCode":"/**\n * @param {number} num\n * @return {string}\n */\nvar intToRoman = function(num) {\n\n};"},{"value":"typescript","text":"TypeScript","defaultCode":"function intToRoman(num: number): string {\n    \n};"},{"value":"php","text":"PHP","defaultCode":"class Solution {\n\n    /**\n     * @param Integer $num\n     * @return String\n     */\n    function intToRoman($num) {\n\n    }\n}"},{"value":"swift","text":"Swift","defaultCode":"class Solution {\n    func intToRoman(_ num: Int) -> String {\n\n    }\n}"},{"value":"kotlin","text":"Kotlin","defaultCode":"class Solution {\n    fun intToRoman(num: Int): String {\n\n    }\n}"},{"value":"dart","text":"Dart","defaultCode":"class Solution {\n  String intToRoman(int num) {\n    \n  }\n}"},{"value":"golang","text":"Go","defaultCode":"func intToRoman(num int) string {\n\n}"},{"value":"ruby","text":"Ruby","defaultCode":"# @param {Integer} num\n# @return {String}\ndef int_to_roman(num)\n\nend"},{"value":"scala","text":"Scala","defaultCode":"object Solution {\n    def intToRoman(num: Int): String = {\n        \n    }\n}"},{"value":"rust","text":"Rust","defaultCode":"impl Solution {\n    pub fn int_to_roman(num: i32) -> String {\n\n    }\n}"},{"value":"racket","text":"Racket","defaultCode":"(define/contract (int-to-roman num)\n  (-> exact-integer? string?)\n  )"},{"value":"erlang","text":"Erlang","defaultCode":"-spec int_to_roman(Num :: integer()) -> unicode:unicode_binary().\nint_to_roman(Num) ->\n  ."},{"value":"elixir","text":"Elixir","defaultCode":"defmodule Solution do\n  @spec int_to_roman(num :: integer) :: String.t\n  def int_to_roman(num) do\n    \n  end\nend"}],"testcase":"3749","testable":true,"templateMeta":{"name":"intToRoman","params":[{"name":"num","type":"integer"}],"return":{"type":"string"}}}