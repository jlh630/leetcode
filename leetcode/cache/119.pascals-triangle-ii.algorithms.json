{"id":119,"fid":"119","name":"杨辉三角 II","slug":"pascals-triangle-ii","link":"https://leetcode.cn/problems/pascals-triangle-ii/description/","percent":69.09162821357943,"level":"Easy","category":"algorithms","en_name":"Pascal's Triangle II","cn_name":"杨辉三角 II","totalAC":"316K","totalSubmit":"457.1K","likes":547,"dislikes":0,"desc":"<p>给定一个非负索引 <code>rowIndex</code>，返回「杨辉三角」的第 <code>rowIndex</code><em> </em>行。</p>\n\n<p><small>在「杨辉三角」中，每个数是它左上方和右上方的数的和。</small></p>\n\n<p><img alt=\"\" src=\"https://pic.leetcode-cn.com/1626927345-DZmfxB-PascalTriangleAnimated2.gif\" /></p>\n\n<p> </p>\n\n<p><strong>示例 1:</strong></p>\n\n<pre>\n<strong>输入:</strong> rowIndex = 3\n<strong>输出:</strong> [1,3,3,1]\n</pre>\n\n<p><strong>示例 2:</strong></p>\n\n<pre>\n<strong>输入:</strong> rowIndex = 0\n<strong>输出:</strong> [1]\n</pre>\n\n<p><strong>示例 3:</strong></p>\n\n<pre>\n<strong>输入:</strong> rowIndex = 1\n<strong>输出:</strong> [1,1]\n</pre>\n\n<p> </p>\n\n<p><strong>提示:</strong></p>\n\n<ul>\n\t<li><code>0 <= rowIndex <= 33</code></li>\n</ul>\n\n<p> </p>\n\n<p><strong>进阶：</strong></p>\n\n<p>你可以优化你的算法到 <code><em>O</em>(<i>rowIndex</i>)</code> 空间复杂度吗？</p>\n","templates":[{"value":"cpp","text":"C++","defaultCode":"class Solution {\npublic:\n    vector<int> getRow(int rowIndex) {\n\n    }\n};"},{"value":"java","text":"Java","defaultCode":"class Solution {\n    public List<Integer> getRow(int rowIndex) {\n\n    }\n}"},{"value":"python","text":"Python","defaultCode":"class Solution(object):\n    def getRow(self, rowIndex):\n        \"\"\"\n        :type rowIndex: int\n        :rtype: List[int]\n        \"\"\""},{"value":"python3","text":"Python3","defaultCode":"class Solution:\n    def getRow(self, rowIndex: int) -> List[int]:"},{"value":"c","text":"C","defaultCode":"/**\n * Note: The returned array must be malloced, assume caller calls free().\n */\nint* getRow(int rowIndex, int* returnSize) {\n    \n}"},{"value":"csharp","text":"C#","defaultCode":"public class Solution {\n    public IList<int> GetRow(int rowIndex) {\n\n    }\n}"},{"value":"javascript","text":"JavaScript","defaultCode":"/**\n * @param {number} rowIndex\n * @return {number[]}\n */\nvar getRow = function(rowIndex) {\n\n};"},{"value":"typescript","text":"TypeScript","defaultCode":"function getRow(rowIndex: number): number[] {\n    \n};"},{"value":"php","text":"PHP","defaultCode":"class Solution {\n\n    /**\n     * @param Integer $rowIndex\n     * @return Integer[]\n     */\n    function getRow($rowIndex) {\n\n    }\n}"},{"value":"swift","text":"Swift","defaultCode":"class Solution {\n    func getRow(_ rowIndex: Int) -> [Int] {\n\n    }\n}"},{"value":"kotlin","text":"Kotlin","defaultCode":"class Solution {\n    fun getRow(rowIndex: Int): List<Int> {\n\n    }\n}"},{"value":"dart","text":"Dart","defaultCode":"class Solution {\n  List<int> getRow(int rowIndex) {\n    \n  }\n}"},{"value":"golang","text":"Go","defaultCode":"func getRow(rowIndex int) []int {\n\n}"},{"value":"ruby","text":"Ruby","defaultCode":"# @param {Integer} row_index\n# @return {Integer[]}\ndef get_row(row_index)\n\nend"},{"value":"scala","text":"Scala","defaultCode":"object Solution {\n    def getRow(rowIndex: Int): List[Int] = {\n\n    }\n}"},{"value":"rust","text":"Rust","defaultCode":"impl Solution {\n    pub fn get_row(row_index: i32) -> Vec<i32> {\n\n    }\n}"},{"value":"racket","text":"Racket","defaultCode":"(define/contract (get-row rowIndex)\n  (-> exact-integer? (listof exact-integer?))\n  )"},{"value":"erlang","text":"Erlang","defaultCode":"-spec get_row(RowIndex :: integer()) -> [integer()].\nget_row(RowIndex) ->\n  ."},{"value":"elixir","text":"Elixir","defaultCode":"defmodule Solution do\n  @spec get_row(row_index :: integer) :: [integer]\n  def get_row(row_index) do\n    \n  end\nend"}],"testcase":"3","testable":true,"templateMeta":{"name":"getRow","params":[{"name":"rowIndex","type":"integer"}],"return":{"type":"list<integer>"}}}