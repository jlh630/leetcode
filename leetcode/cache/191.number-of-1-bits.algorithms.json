{"id":191,"fid":"191","name":"位1的个数","slug":"number-of-1-bits","link":"https://leetcode.cn/problems/number-of-1-bits/description/","percent":77.85076247542959,"level":"Easy","category":"algorithms","en_name":"Number of 1 Bits","cn_name":"位1的个数","totalAC":"393.3K","totalSubmit":"505.2K","likes":647,"dislikes":0,"desc":"<p>编写一个函数，获取一个正整数的二进制形式并返回其二进制表达式中 <span data-keyword=\"set-bit\">设置位</span> 的个数（也被称为<a href=\"https://baike.baidu.com/item/%E6%B1%89%E6%98%8E%E9%87%8D%E9%87%8F\" target=\"_blank\">汉明重量</a>）。</p>\n\n<p>&nbsp;</p>\n\n<p><strong>示例 1：</strong></p>\n\n<pre>\n<strong>输入：</strong>n = 11\n<strong>输出：</strong>3\n<strong>解释：</strong>输入的二进制串 <code><strong>1011</strong>&nbsp;中，共有 3 个设置位。</code>\n</pre>\n\n<p><strong>示例 2：</strong></p>\n\n<pre>\n<strong>输入：</strong>n = 128\n<strong>输出：</strong>1\n<strong>解释：</strong>输入的二进制串 <strong>10000000</strong>&nbsp;中，共有 1 个设置位。\n</pre>\n\n<p><strong>示例 3：</strong></p>\n\n<pre>\n<strong>输入：</strong>n = 2147483645\n<strong>输出：</strong>30\n<strong>解释：</strong>输入的二进制串 <strong>11111111111111111111111111111101</strong> 中，共有 30 个设置位。</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= n &lt;= 2<sup>31</sup> - 1</code></li>\n</ul>\n\n<ul>\n</ul>\n\n<p>&nbsp;</p>\n\n<p><strong>进阶</strong>：</p>\n\n<ul>\n\t<li>如果多次调用这个函数，你将如何优化你的算法？</li>\n</ul>\n","templates":[{"value":"cpp","text":"C++","defaultCode":"class Solution {\npublic:\n    int hammingWeight(int n) {\n        \n    }\n};"},{"value":"java","text":"Java","defaultCode":"class Solution {\n    public int hammingWeight(int n) {\n\n    }\n}"},{"value":"python","text":"Python","defaultCode":"class Solution(object):\n    def hammingWeight(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\""},{"value":"python3","text":"Python3","defaultCode":"class Solution:\n    def hammingWeight(self, n: int) -> int:"},{"value":"c","text":"C","defaultCode":"int hammingWeight(int n) {\n    \n}"},{"value":"csharp","text":"C#","defaultCode":"public class Solution {\n    public int HammingWeight(int n) {\n\n    }\n}"},{"value":"javascript","text":"JavaScript","defaultCode":"/**\n * @param {number} n\n * @return {number}\n */\nvar hammingWeight = function(n) {\n\n};"},{"value":"typescript","text":"TypeScript","defaultCode":"function hammingWeight(n: number): number {\n    \n};"},{"value":"php","text":"PHP","defaultCode":"class Solution {\n\n    /**\n     * @param Integer $n\n     * @return Integer\n     */\n    function hammingWeight($n) {\n\n    }\n}"},{"value":"swift","text":"Swift","defaultCode":"class Solution {\n    func hammingWeight(_ n: Int) -> Int {\n\n    }\n}"},{"value":"kotlin","text":"Kotlin","defaultCode":"class Solution {\n    fun hammingWeight(n: Int): Int {\n\n    }\n}"},{"value":"dart","text":"Dart","defaultCode":"class Solution {\n  int hammingWeight(int n) {\n    \n  }\n}"},{"value":"golang","text":"Go","defaultCode":"func hammingWeight(n int) int {\n\n}"},{"value":"ruby","text":"Ruby","defaultCode":"# @param {Integer} n\n# @return {Integer}\ndef hamming_weight(n)\n\nend"},{"value":"scala","text":"Scala","defaultCode":"object Solution {\n    def hammingWeight(n: Int): Int = {\n        \n    }\n}"},{"value":"rust","text":"Rust","defaultCode":"impl Solution {\n    pub fn hamming_weight(n: i32) -> i32 {\n\n    }\n}"},{"value":"racket","text":"Racket","defaultCode":"(define/contract (hamming-weight n)\n  (-> exact-integer? exact-integer?)\n  )"},{"value":"erlang","text":"Erlang","defaultCode":"-spec hamming_weight(N :: integer()) -> integer().\nhamming_weight(N) ->\n  ."},{"value":"elixir","text":"Elixir","defaultCode":"defmodule Solution do\n  @spec hamming_weight(n :: integer) :: integer\n  def hamming_weight(n) do\n    \n  end\nend"}],"testcase":"11","testable":true,"templateMeta":{"name":"hammingWeight","params":[{"name":"n","type":"integer"}],"return":{"type":"integer"},"manual":false}}