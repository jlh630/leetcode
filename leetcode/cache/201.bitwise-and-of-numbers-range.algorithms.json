{"id":201,"fid":"201","name":"数字范围按位与","slug":"bitwise-and-of-numbers-range","link":"https://leetcode.cn/problems/bitwise-and-of-numbers-range/description/","percent":54.76864152375695,"level":"Medium","category":"algorithms","en_name":"Bitwise AND of Numbers Range","cn_name":"数字范围按位与","totalAC":"97.5K","totalSubmit":"177.5K","likes":523,"dislikes":0,"desc":"<p>给你两个整数 <code>left</code> 和 <code>right</code> ，表示区间 <code>[left, right]</code> ，返回此区间内所有数字 <strong>按位与</strong> 的结果（包含 <code>left</code> 、<code>right</code> 端点）。</p>\n\n<p> </p>\n\n<p><strong>示例 1：</strong></p>\n\n<pre>\n<strong>输入：</strong>left = 5, right = 7\n<strong>输出：</strong>4\n</pre>\n\n<p><strong>示例 2：</strong></p>\n\n<pre>\n<strong>输入：</strong>left = 0, right = 0\n<strong>输出：</strong>0\n</pre>\n\n<p><strong>示例 3：</strong></p>\n\n<pre>\n<strong>输入：</strong>left = 1, right = 2147483647\n<strong>输出：</strong>0\n</pre>\n\n<p> </p>\n\n<p><strong>提示：</strong></p>\n\n<ul>\n\t<li><code>0 <= left <= right <= 2<sup>31</sup> - 1</code></li>\n</ul>\n","templates":[{"value":"cpp","text":"C++","defaultCode":"class Solution {\npublic:\n    int rangeBitwiseAnd(int left, int right) {\n\n    }\n};"},{"value":"java","text":"Java","defaultCode":"class Solution {\n    public int rangeBitwiseAnd(int left, int right) {\n\n    }\n}"},{"value":"python","text":"Python","defaultCode":"class Solution(object):\n    def rangeBitwiseAnd(self, left, right):\n        \"\"\"\n        :type left: int\n        :type right: int\n        :rtype: int\n        \"\"\""},{"value":"python3","text":"Python3","defaultCode":"class Solution:\n    def rangeBitwiseAnd(self, left: int, right: int) -> int:"},{"value":"c","text":"C","defaultCode":"int rangeBitwiseAnd(int left, int right) {\n    \n}"},{"value":"csharp","text":"C#","defaultCode":"public class Solution {\n    public int RangeBitwiseAnd(int left, int right) {\n\n    }\n}"},{"value":"javascript","text":"JavaScript","defaultCode":"/**\n * @param {number} left\n * @param {number} right\n * @return {number}\n */\nvar rangeBitwiseAnd = function(left, right) {\n\n};"},{"value":"typescript","text":"TypeScript","defaultCode":"function rangeBitwiseAnd(left: number, right: number): number {\n    \n};"},{"value":"php","text":"PHP","defaultCode":"class Solution {\n\n    /**\n     * @param Integer $left\n     * @param Integer $right\n     * @return Integer\n     */\n    function rangeBitwiseAnd($left, $right) {\n\n    }\n}"},{"value":"swift","text":"Swift","defaultCode":"class Solution {\n    func rangeBitwiseAnd(_ left: Int, _ right: Int) -> Int {\n\n    }\n}"},{"value":"kotlin","text":"Kotlin","defaultCode":"class Solution {\n    fun rangeBitwiseAnd(left: Int, right: Int): Int {\n\n    }\n}"},{"value":"dart","text":"Dart","defaultCode":"class Solution {\n  int rangeBitwiseAnd(int left, int right) {\n    \n  }\n}"},{"value":"golang","text":"Go","defaultCode":"func rangeBitwiseAnd(left int, right int) int {\n\n}"},{"value":"ruby","text":"Ruby","defaultCode":"# @param {Integer} left\n# @param {Integer} right\n# @return {Integer}\ndef range_bitwise_and(left, right)\n    \nend"},{"value":"scala","text":"Scala","defaultCode":"object Solution {\n    def rangeBitwiseAnd(left: Int, right: Int): Int = {\n        \n    }\n}"},{"value":"rust","text":"Rust","defaultCode":"impl Solution {\n    pub fn range_bitwise_and(left: i32, right: i32) -> i32 {\n\n    }\n}"},{"value":"racket","text":"Racket","defaultCode":"(define/contract (range-bitwise-and left right)\n  (-> exact-integer? exact-integer? exact-integer?)\n  )"},{"value":"erlang","text":"Erlang","defaultCode":"-spec range_bitwise_and(Left :: integer(), Right :: integer()) -> integer().\nrange_bitwise_and(Left, Right) ->\n  ."},{"value":"elixir","text":"Elixir","defaultCode":"defmodule Solution do\n  @spec range_bitwise_and(left :: integer, right :: integer) :: integer\n  def range_bitwise_and(left, right) do\n    \n  end\nend"}],"testcase":"5\n7","testable":true,"templateMeta":{"name":"rangeBitwiseAnd","params":[{"name":"left","type":"integer"},{"name":"right","type":"integer"}],"return":{"type":"integer"}}}