{"id":600,"fid":"600","name":"不含连续1的非负整数","slug":"non-negative-integers-without-consecutive-ones","link":"https://leetcode.cn/problems/non-negative-integers-without-consecutive-ones/description/","percent":50.31818669336098,"level":"Hard","category":"algorithms","en_name":"Non-negative Integers without Consecutive Ones","cn_name":"不含连续1的非负整数","totalAC":"31.7K","totalSubmit":"62.1K","likes":377,"dislikes":0,"desc":"<p>给定一个正整数 <code>n</code> ，请你统计在&nbsp;<code>[0, n]</code> 范围的非负整数中，有多少个整数的二进制表示中不存在 <strong>连续的 1 </strong>。</p>\n\n<p>&nbsp;</p>\n\n<p><strong>示例 1:</strong></p>\n\n<pre>\n<strong>输入:</strong> n = 5\n<strong>输出:</strong> 5\n<strong>解释:</strong> \n下面列出范围在 [0, 5] 的非负整数与其对应的二进制表示：\n0 : 0\n1 : 1\n2 : 10\n3 : 11\n4 : 100\n5 : 101\n其中，只有整数 3 违反规则（有两个连续的 1 ），其他 5 个满足规则。</pre>\n\n<p><strong>示例 2:</strong></p>\n\n<pre>\n<strong>输入:</strong> n = 1\n<strong>输出:</strong> 2\n</pre>\n\n<p><strong>示例 3:</strong></p>\n\n<pre>\n<strong>输入:</strong> n = 2\n<strong>输出:</strong> 3\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= n &lt;= 10<sup>9</sup></code></li>\n</ul>\n","templates":[{"value":"cpp","text":"C++","defaultCode":"class Solution {\npublic:\n    int findIntegers(int n) {\n\n    }\n};"},{"value":"java","text":"Java","defaultCode":"class Solution {\n    public int findIntegers(int n) {\n\n    }\n}"},{"value":"python","text":"Python","defaultCode":"class Solution(object):\n    def findIntegers(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\""},{"value":"python3","text":"Python3","defaultCode":"class Solution:\n    def findIntegers(self, n: int) -> int:"},{"value":"c","text":"C","defaultCode":"int findIntegers(int n) {\n    \n}"},{"value":"csharp","text":"C#","defaultCode":"public class Solution {\n    public int FindIntegers(int n) {\n\n    }\n}"},{"value":"javascript","text":"JavaScript","defaultCode":"/**\n * @param {number} n\n * @return {number}\n */\nvar findIntegers = function(n) {\n\n};"},{"value":"typescript","text":"TypeScript","defaultCode":"function findIntegers(n: number): number {\n    \n};"},{"value":"php","text":"PHP","defaultCode":"class Solution {\n\n    /**\n     * @param Integer $n\n     * @return Integer\n     */\n    function findIntegers($n) {\n\n    }\n}"},{"value":"swift","text":"Swift","defaultCode":"class Solution {\n    func findIntegers(_ n: Int) -> Int {\n\n    }\n}"},{"value":"kotlin","text":"Kotlin","defaultCode":"class Solution {\n    fun findIntegers(n: Int): Int {\n\n    }\n}"},{"value":"dart","text":"Dart","defaultCode":"class Solution {\n  int findIntegers(int n) {\n    \n  }\n}"},{"value":"golang","text":"Go","defaultCode":"func findIntegers(n int) int {\n\n}"},{"value":"ruby","text":"Ruby","defaultCode":"# @param {Integer} n\n# @return {Integer}\ndef find_integers(n)\n\nend"},{"value":"scala","text":"Scala","defaultCode":"object Solution {\n    def findIntegers(n: Int): Int = {\n\n    }\n}"},{"value":"rust","text":"Rust","defaultCode":"impl Solution {\n    pub fn find_integers(n: i32) -> i32 {\n\n    }\n}"},{"value":"racket","text":"Racket","defaultCode":"(define/contract (find-integers n)\n  (-> exact-integer? exact-integer?)\n  )"},{"value":"erlang","text":"Erlang","defaultCode":"-spec find_integers(N :: integer()) -> integer().\nfind_integers(N) ->\n  ."},{"value":"elixir","text":"Elixir","defaultCode":"defmodule Solution do\n  @spec find_integers(n :: integer) :: integer\n  def find_integers(n) do\n    \n  end\nend"}],"testcase":"5","testable":true,"templateMeta":{"name":"findIntegers","params":[{"name":"n","type":"integer"}],"return":{"type":"integer"}}}