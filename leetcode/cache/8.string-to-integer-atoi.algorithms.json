{"id":8,"fid":"8","name":"字符串转换整数 (atoi)","slug":"string-to-integer-atoi","link":"https://leetcode.cn/problems/string-to-integer-atoi/description/","percent":21.270945315318084,"level":"Medium","category":"algorithms","en_name":"String to Integer (atoi)","cn_name":"字符串转换整数 (atoi)","totalAC":"659K","totalSubmit":"3.1M","likes":1832,"dislikes":0,"desc":"<p>请你来实现一个&nbsp;<code>myAtoi(string s)</code>&nbsp;函数，使其能将字符串转换成一个 32 位有符号整数。</p>\n\n<p>函数&nbsp;<code>myAtoi(string s)</code> 的算法如下：</p>\n\n<ol>\n\t<li><strong>空格：</strong>读入字符串并丢弃无用的前导空格（<code>\" \"</code>）</li>\n\t<li><strong>符号：</strong>检查下一个字符（假设还未到字符末尾）为&nbsp;<code>'-'</code> 还是 <code>'+'</code>。如果两者都不存在，则假定结果为正。</li>\n\t<li><strong>转换：</strong>通过跳过前置零来读取该整数，直到遇到非数字字符或到达字符串的结尾。如果没有读取数字，则结果为0。</li>\n\t<li><b>舍入：</b>如果整数数超过 32 位有符号整数范围 <code>[−2<sup>31</sup>,&nbsp; 2<sup>31&nbsp;</sup>− 1]</code> ，需要截断这个整数，使其保持在这个范围内。具体来说，小于 <code>−2<sup>31</sup></code> 的整数应该被舍入为 <code>−2<sup>31</sup></code> ，大于 <code>2<sup>31&nbsp;</sup>− 1</code> 的整数应该被舍入为 <code>2<sup>31&nbsp;</sup>− 1</code> 。</li>\n</ol>\n\n<p>返回整数作为最终结果。</p>\n\n<p>&nbsp;</p>\n\n<p><strong class=\"example\">示例&nbsp;1：</strong></p>\n\n<div class=\"example-block\">\n<p><strong>输入：</strong><span class=\"example-io\">s = \"42\"</span></p>\n\n<p><strong>输出：</strong><span class=\"example-io\">42</span></p>\n\n<p><strong>解释：</strong>加粗的字符串为已经读入的字符，插入符号是当前读取的字符。</p>\n\n<pre>\n带下划线线的字符是所读的内容，插入符号是当前读入位置。\n第 1 步：\"42\"（当前没有读入字符，因为没有前导空格）\n         ^\n第 2 步：\"42\"（当前没有读入字符，因为这里不存在 '-' 或者 '+'）\n         ^\n第 3 步：\"<u>42</u>\"（读入 \"42\"）\n           ^\n</pre>\n</div>\n\n<p><strong class=\"example\">示例&nbsp;2：</strong></p>\n\n<div class=\"example-block\">\n<p><strong>输入：</strong><span class=\"example-io\">s = \" -042\"</span></p>\n\n<p><strong>输出：</strong><span class=\"example-io\">-42</span></p>\n\n<p><strong>解释：</strong></p>\n\n<pre>\n第 1 步：\"<u><strong>   </strong></u>-042\"（读入前导空格，但忽视掉）\n            ^\n第 2 步：\"   <u>-</u>042\"（读入 '-' 字符，所以结果应该是负数）\n             ^\n第 3 步：\"   <u>-042</u>\"（读入 \"042\"，在结果中忽略前导零）\n               ^\n</pre>\n</div>\n\n<p><strong class=\"example\">示例&nbsp;3：</strong></p>\n\n<div class=\"example-block\">\n<p><strong>输入：</strong><span class=\"example-io\">s = \"</span>1337c0d3<span class=\"example-io\">\"</span></p>\n\n<p><strong>输出：</strong><span class=\"example-io\">1337</span></p>\n\n<p><strong>解释：</strong></p>\n\n<pre>\n第 1 步：\"1337c0d3\"（当前没有读入字符，因为没有前导空格）\n         ^\n第 2 步：\"1337c0d3\"（当前没有读入字符，因为这里不存在 '-' 或者 '+'）\n         ^\n第 3 步：\"1337c0d3\"（读入 \"1337\"；由于下一个字符不是一个数字，所以读入停止）\n             ^\n</pre>\n</div>\n\n<p><strong class=\"example\">示例 4：</strong></p>\n\n<div class=\"example-block\">\n<p><strong>输入：</strong><span class=\"example-io\">s = \"0-1\"</span></p>\n\n<p><span class=\"example-io\"><b>输出：</b>0</span></p>\n\n<p><strong>解释：</strong></p>\n\n<pre>\n第 1 步：\"0-1\" (当前没有读入字符，因为没有前导空格)\n         ^\n第 2 步：\"0-1\" (当前没有读入字符，因为这里不存在 '-' 或者 '+')\n         ^\n第 3 步：\"<u>0</u>-1\" (读入 \"0\"；由于下一个字符不是一个数字，所以读入停止)\n          ^\n</pre>\n</div>\n\n<p><strong class=\"example\">示例 5：</strong></p>\n\n<div class=\"example-block\">\n<p><strong>输入：</strong><span class=\"example-io\">s = \"words and 987\"</span></p>\n\n<p><strong>输出：</strong><span class=\"example-io\">0</span></p>\n\n<p><strong>解释：</strong></p>\n\n<p>读取在第一个非数字字符“w”处停止。</p>\n</div>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ul>\n\t<li><code>0 &lt;= s.length &lt;= 200</code></li>\n\t<li><code>s</code> 由英文字母（大写和小写）、数字（<code>0-9</code>）、<code>' '</code>、<code>'+'</code>、<code>'-'</code> 和 <code>'.'</code> 组成</li>\n</ul>\n","templates":[{"value":"cpp","text":"C++","defaultCode":"class Solution {\npublic:\n    int myAtoi(string s) {\n\n    }\n};"},{"value":"java","text":"Java","defaultCode":"class Solution {\n    public int myAtoi(String s) {\n\n    }\n}"},{"value":"python","text":"Python","defaultCode":"class Solution(object):\n    def myAtoi(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\""},{"value":"python3","text":"Python3","defaultCode":"class Solution:\n    def myAtoi(self, s: str) -> int:"},{"value":"c","text":"C","defaultCode":"int myAtoi(char* s) {\n    \n}"},{"value":"csharp","text":"C#","defaultCode":"public class Solution {\n    public int MyAtoi(string s) {\n\n    }\n}"},{"value":"javascript","text":"JavaScript","defaultCode":"/**\n * @param {string} s\n * @return {number}\n */\nvar myAtoi = function(s) {\n\n};"},{"value":"typescript","text":"TypeScript","defaultCode":"function myAtoi(s: string): number {\n    \n};"},{"value":"php","text":"PHP","defaultCode":"class Solution {\n\n    /**\n     * @param String $s\n     * @return Integer\n     */\n    function myAtoi($s) {\n\n    }\n}"},{"value":"swift","text":"Swift","defaultCode":"class Solution {\n    func myAtoi(_ s: String) -> Int {\n\n    }\n}"},{"value":"kotlin","text":"Kotlin","defaultCode":"class Solution {\n    fun myAtoi(s: String): Int {\n\n    }\n}"},{"value":"dart","text":"Dart","defaultCode":"class Solution {\n  int myAtoi(String s) {\n    \n  }\n}"},{"value":"golang","text":"Go","defaultCode":"func myAtoi(s string) int {\n\n}"},{"value":"ruby","text":"Ruby","defaultCode":"# @param {String} s\n# @return {Integer}\ndef my_atoi(s)\n\nend"},{"value":"scala","text":"Scala","defaultCode":"object Solution {\n    def myAtoi(s: String): Int = {\n        \n    }\n}"},{"value":"rust","text":"Rust","defaultCode":"impl Solution {\n    pub fn my_atoi(s: String) -> i32 {\n\n    }\n}"},{"value":"racket","text":"Racket","defaultCode":"(define/contract (my-atoi s)\n  (-> string? exact-integer?)\n  )"},{"value":"erlang","text":"Erlang","defaultCode":"-spec my_atoi(S :: unicode:unicode_binary()) -> integer().\nmy_atoi(S) ->\n  ."},{"value":"elixir","text":"Elixir","defaultCode":"defmodule Solution do\n  @spec my_atoi(s :: String.t) :: integer\n  def my_atoi(s) do\n    \n  end\nend"}],"testcase":"\"42\"","testable":true,"templateMeta":{"name":"myAtoi","params":[{"name":"s","type":"string"}],"return":{"type":"integer"}}}