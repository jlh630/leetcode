{"id":38,"fid":"38","name":"外观数列","slug":"count-and-say","link":"https://leetcode.cn/problems/count-and-say/description/","percent":61.06250121705039,"level":"Medium","category":"algorithms","en_name":"Count and Say","cn_name":"外观数列","totalAC":"376.3K","totalSubmit":"616.2K","likes":1092,"dislikes":0,"desc":"<p>「外观数列」是一个数位字符串序列，由递归公式定义：</p>\n\n<ul>\n\t<li><code>countAndSay(1) = \"1\"</code></li>\n\t<li><code>countAndSay(n)</code> 是&nbsp;<code>countAndSay(n-1)</code> 的行程长度编码。</li>\n</ul>\n\n<p>&nbsp;</p>\n\n<ul>\n</ul>\n\n<p><a href=\"https://baike.baidu.com/item/%E8%A1%8C%E7%A8%8B%E9%95%BF%E5%BA%A6%E7%BC%96%E7%A0%81/2931940\">行程长度编码</a>（RLE）是一种字符串压缩方法，其工作原理是通过将连续相同字符（重复两次或更多次）替换为字符重复次数（运行长度）和字符的串联。例如，要压缩字符串&nbsp;<code>\"3322251\"</code>&nbsp;，我们将&nbsp;<code>\"33\"</code>&nbsp;用&nbsp;<code>\"23\"</code>&nbsp;替换，将&nbsp;<code>\"222\"</code>&nbsp;用&nbsp;<code>\"32\"</code>&nbsp;替换，将&nbsp;<code>\"5\"</code>&nbsp;用&nbsp;<code>\"15\"</code>&nbsp;替换并将&nbsp;<code>\"1\"</code>&nbsp;用&nbsp;<code>\"11\"</code>&nbsp;替换。因此压缩后字符串变为 <code>\"23321511\"</code>。</p>\n\n<p>给定一个整数&nbsp;<code>n</code>&nbsp;，返回&nbsp;<strong>外观数列</strong>&nbsp;的第&nbsp;<code>n</code>&nbsp;个元素。</p>\n\n<p><strong>示例 1：</strong></p>\n\n<div class=\"example-block\">\n<p><strong>输入：</strong>n = 4</p>\n\n<p><strong>输出：</strong>\"1211\"</p>\n\n<p><strong>解释：</strong></p>\n\n<p>countAndSay(1) = \"1\"</p>\n\n<p>countAndSay(2) = \"1\" 的行程长度编码 = \"11\"</p>\n\n<p>countAndSay(3) = \"11\" 的行程长度编码 = \"21\"</p>\n\n<p>countAndSay(4) = \"21\" 的行程长度编码 = \"1211\"</p>\n</div>\n\n<p><strong class=\"example\">示例 2：</strong></p>\n\n<div class=\"example-block\">\n<p><strong>输入：</strong><span class=\"example-io\">n = 1</span></p>\n\n<p><strong>输出：</strong><span class=\"example-io\">\"1\"</span></p>\n\n<p><strong>解释：</strong></p>\n\n<p>这是基本情况。</p>\n</div>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= n &lt;= 30</code></li>\n</ul>\n\n<p>&nbsp;</p>\n<strong>进阶：</strong>你能迭代解决该问题吗？","templates":[{"value":"cpp","text":"C++","defaultCode":"class Solution {\npublic:\n    string countAndSay(int n) {\n\n    }\n};"},{"value":"java","text":"Java","defaultCode":"class Solution {\n    public String countAndSay(int n) {\n\n    }\n}"},{"value":"python","text":"Python","defaultCode":"class Solution(object):\n    def countAndSay(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: str\n        \"\"\""},{"value":"python3","text":"Python3","defaultCode":"class Solution:\n    def countAndSay(self, n: int) -> str:"},{"value":"c","text":"C","defaultCode":"char* countAndSay(int n) {\n    \n}"},{"value":"csharp","text":"C#","defaultCode":"public class Solution {\n    public string CountAndSay(int n) {\n\n    }\n}"},{"value":"javascript","text":"JavaScript","defaultCode":"/**\n * @param {number} n\n * @return {string}\n */\nvar countAndSay = function(n) {\n\n};"},{"value":"typescript","text":"TypeScript","defaultCode":"function countAndSay(n: number): string {\n    \n};"},{"value":"php","text":"PHP","defaultCode":"class Solution {\n\n    /**\n     * @param Integer $n\n     * @return String\n     */\n    function countAndSay($n) {\n\n    }\n}"},{"value":"swift","text":"Swift","defaultCode":"class Solution {\n    func countAndSay(_ n: Int) -> String {\n\n    }\n}"},{"value":"kotlin","text":"Kotlin","defaultCode":"class Solution {\n    fun countAndSay(n: Int): String {\n\n    }\n}"},{"value":"dart","text":"Dart","defaultCode":"class Solution {\n  String countAndSay(int n) {\n    \n  }\n}"},{"value":"golang","text":"Go","defaultCode":"func countAndSay(n int) string {\n\n}"},{"value":"ruby","text":"Ruby","defaultCode":"# @param {Integer} n\n# @return {String}\ndef count_and_say(n)\n\nend"},{"value":"scala","text":"Scala","defaultCode":"object Solution {\n    def countAndSay(n: Int): String = {\n        \n    }\n}"},{"value":"rust","text":"Rust","defaultCode":"impl Solution {\n    pub fn count_and_say(n: i32) -> String {\n\n    }\n}"},{"value":"racket","text":"Racket","defaultCode":"(define/contract (count-and-say n)\n  (-> exact-integer? string?)\n  )"},{"value":"erlang","text":"Erlang","defaultCode":"-spec count_and_say(N :: integer()) -> unicode:unicode_binary().\ncount_and_say(N) ->\n  ."},{"value":"elixir","text":"Elixir","defaultCode":"defmodule Solution do\n  @spec count_and_say(n :: integer) :: String.t\n  def count_and_say(n) do\n    \n  end\nend"},{"value":"cangjie","text":"Cangjie","defaultCode":"class Solution {\n    func countAndSay(n: Int64): String {\n\n    }\n}"}],"testcase":"1","testable":true,"templateMeta":{"name":"countAndSay","params":[{"name":"n","type":"integer"}],"return":{"type":"string"}}}