{"id":91,"fid":"91","name":"解码方法","slug":"decode-ways","link":"https://leetcode.cn/problems/decode-ways/description/","percent":33.81563708672945,"level":"Medium","category":"algorithms","en_name":"Decode Ways","cn_name":"解码方法","totalAC":"310.7K","totalSubmit":"918K","likes":1532,"dislikes":0,"desc":"<p>一条包含字母&nbsp;<code>A-Z</code> 的消息通过以下映射进行了 <strong>编码</strong> ：</p>\n\n<p><code>\"1\" -&gt; 'A'<br />\n\"2\" -&gt; 'B'<br />\n...<br />\n\"25\" -&gt; 'Y'<br />\n\"26\" -&gt; 'Z'</code></p>\n\n<p>然而，在&nbsp;<strong>解码</strong> 已编码的消息时，你意识到有许多不同的方式来解码，因为有些编码被包含在其它编码当中（<code>\"2\"</code> 和 <code>\"5\"</code> 与 <code>\"25\"</code>）。</p>\n\n<p>例如，<code>\"11106\"</code> 可以映射为：</p>\n\n<ul>\n\t<li><code>\"AAJF\"</code> ，将消息分组为 <code>(1, 1, 10, 6)</code></li>\n\t<li><code>\"KJF\"</code> ，将消息分组为 <code>(11, 10, 6)</code></li>\n\t<li>消息不能分组为&nbsp; <code>(1, 11, 06)</code> ，因为 <code>\"06\"</code>&nbsp;不是一个合法编码（只有 \"6\" 是合法的）。</li>\n</ul>\n\n<p>注意，可能存在无法解码的字符串。</p>\n\n<p>给你一个只含数字的 <strong>非空 </strong>字符串 <code>s</code> ，请计算并返回 <strong>解码</strong> 方法的 <strong>总数</strong> 。如果没有合法的方式解码整个字符串，返回 <code>0</code>。</p>\n\n<p>题目数据保证答案肯定是一个 <strong>32 位</strong> 的整数。</p>\n\n<p>&nbsp;</p>\n\n<p><strong>示例 1：</strong></p>\n\n<pre>\n<strong>输入：</strong>s = \"12\"\n<strong>输出：</strong>2\n<strong>解释：</strong>它可以解码为 \"AB\"（1 2）或者 \"L\"（12）。\n</pre>\n\n<p><strong>示例 2：</strong></p>\n\n<pre>\n<strong>输入：</strong>s = \"226\"\n<strong>输出：</strong>3\n<strong>解释：</strong>它可以解码为 \"BZ\" (2 26), \"VF\" (22 6), 或者 \"BBF\" (2 2 6) 。\n</pre>\n\n<p><strong>示例 3：</strong></p>\n\n<pre>\n<strong>输入：</strong>s = \"06\"\n<strong>输出：</strong>0\n<strong>解释：</strong>\"06\" 无法映射到 \"F\" ，因为存在前导零（\"6\" 和 \"06\" 并不等价）。\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= s.length &lt;= 100</code></li>\n\t<li><code>s</code> 只包含数字，并且可能包含前导零。</li>\n</ul>\n","templates":[{"value":"cpp","text":"C++","defaultCode":"class Solution {\npublic:\n    int numDecodings(string s) {\n\n    }\n};"},{"value":"java","text":"Java","defaultCode":"class Solution {\n    public int numDecodings(String s) {\n\n    }\n}"},{"value":"python","text":"Python","defaultCode":"class Solution(object):\n    def numDecodings(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\""},{"value":"python3","text":"Python3","defaultCode":"class Solution:\n    def numDecodings(self, s: str) -> int:"},{"value":"c","text":"C","defaultCode":"int numDecodings(char* s) {\n    \n}"},{"value":"csharp","text":"C#","defaultCode":"public class Solution {\n    public int NumDecodings(string s) {\n\n    }\n}"},{"value":"javascript","text":"JavaScript","defaultCode":"/**\n * @param {string} s\n * @return {number}\n */\nvar numDecodings = function(s) {\n\n};"},{"value":"typescript","text":"TypeScript","defaultCode":"function numDecodings(s: string): number {\n    \n};"},{"value":"php","text":"PHP","defaultCode":"class Solution {\n\n    /**\n     * @param String $s\n     * @return Integer\n     */\n    function numDecodings($s) {\n\n    }\n}"},{"value":"swift","text":"Swift","defaultCode":"class Solution {\n    func numDecodings(_ s: String) -> Int {\n\n    }\n}"},{"value":"kotlin","text":"Kotlin","defaultCode":"class Solution {\n    fun numDecodings(s: String): Int {\n\n    }\n}"},{"value":"dart","text":"Dart","defaultCode":"class Solution {\n  int numDecodings(String s) {\n    \n  }\n}"},{"value":"golang","text":"Go","defaultCode":"func numDecodings(s string) int {\n\n}"},{"value":"ruby","text":"Ruby","defaultCode":"# @param {String} s\n# @return {Integer}\ndef num_decodings(s)\n\nend"},{"value":"scala","text":"Scala","defaultCode":"object Solution {\n    def numDecodings(s: String): Int = {\n        \n    }\n}"},{"value":"rust","text":"Rust","defaultCode":"impl Solution {\n    pub fn num_decodings(s: String) -> i32 {\n\n    }\n}"},{"value":"racket","text":"Racket","defaultCode":"(define/contract (num-decodings s)\n  (-> string? exact-integer?)\n  )"},{"value":"erlang","text":"Erlang","defaultCode":"-spec num_decodings(S :: unicode:unicode_binary()) -> integer().\nnum_decodings(S) ->\n  ."},{"value":"elixir","text":"Elixir","defaultCode":"defmodule Solution do\n  @spec num_decodings(s :: String.t) :: integer\n  def num_decodings(s) do\n    \n  end\nend"}],"testcase":"\"12\"","testable":true,"templateMeta":{"name":"numDecodings","params":[{"name":"s","type":"string"}],"return":{"type":"integer"}}}