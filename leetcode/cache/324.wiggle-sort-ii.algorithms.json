{"id":324,"fid":"324","name":"摆动排序 II","slug":"wiggle-sort-ii","link":"https://leetcode.cn/problems/wiggle-sort-ii/description/","percent":41.079530761454734,"level":"Medium","category":"algorithms","en_name":"Wiggle Sort II","cn_name":"摆动排序 II","totalAC":"70.2K","totalSubmit":"170.8K","likes":596,"dislikes":0,"desc":"<p>给你一个整数数组 <code>nums</code>，将它重新排列成 <code>nums[0] < nums[1] > nums[2] < nums[3]...</code> 的顺序。</p>\n\n<p>你可以假设所有输入数组都可以得到满足题目要求的结果。</p>\n\n<p> </p>\n\n<p><strong>示例 1：</strong></p>\n\n<pre>\n<strong>输入：</strong>nums = [1,5,1,1,6,4]\n<strong>输出：</strong>[1,6,1,5,1,4]\n<strong>解释：</strong>[1,4,1,5,1,6] 同样是符合题目要求的结果，可以被判题程序接受。\n</pre>\n\n<p><strong>示例 2：</strong></p>\n\n<pre>\n<strong>输入：</strong>nums = [1,3,2,2,3,1]\n<strong>输出：</strong>[2,3,1,3,1,2]\n</pre>\n\n<p> </p>\n\n<p><strong>提示：</strong></p>\n\n<ul>\n\t<li><code>1 <= nums.length <= 5 * 10<sup>4</sup></code></li>\n\t<li><code>0 <= nums[i] <= 5000</code></li>\n\t<li>题目数据保证，对于给定的输入 <code>nums</code> ，总能产生满足题目要求的结果</li>\n</ul>\n\n<p> </p>\n\n<p><strong>进阶：</strong>你能用 O(n) 时间复杂度和 / 或原地 O(1) 额外空间来实现吗？</p>\n","templates":[{"value":"cpp","text":"C++","defaultCode":"class Solution {\npublic:\n    void wiggleSort(vector<int>& nums) {\n        \n    }\n};"},{"value":"java","text":"Java","defaultCode":"class Solution {\n    public void wiggleSort(int[] nums) {\n\n    }\n}"},{"value":"python","text":"Python","defaultCode":"class Solution(object):\n    def wiggleSort(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: None Do not return anything, modify nums in-place instead.\n        \"\"\""},{"value":"python3","text":"Python3","defaultCode":"class Solution:\n    def wiggleSort(self, nums: List[int]) -> None:\n        \"\"\"\n        Do not return anything, modify nums in-place instead.\n        \"\"\""},{"value":"c","text":"C","defaultCode":"void wiggleSort(int* nums, int numsSize) {\n    \n}"},{"value":"csharp","text":"C#","defaultCode":"public class Solution {\n    public void WiggleSort(int[] nums) {\n\n    }\n}"},{"value":"javascript","text":"JavaScript","defaultCode":"/**\n * @param {number[]} nums\n * @return {void} Do not return anything, modify nums in-place instead.\n */\nvar wiggleSort = function(nums) {\n\n};"},{"value":"typescript","text":"TypeScript","defaultCode":"/**\n Do not return anything, modify nums in-place instead.\n */\nfunction wiggleSort(nums: number[]): void {\n    \n};"},{"value":"php","text":"PHP","defaultCode":"class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @return NULL\n     */\n    function wiggleSort(&$nums) {\n\n    }\n}"},{"value":"swift","text":"Swift","defaultCode":"class Solution {\n    func wiggleSort(_ nums: inout [Int]) {\n\n    }\n}"},{"value":"kotlin","text":"Kotlin","defaultCode":"class Solution {\n    fun wiggleSort(nums: IntArray): Unit {\n\n    }\n}"},{"value":"dart","text":"Dart","defaultCode":"class Solution {\n  void wiggleSort(List<int> nums) {\n    \n  }\n}"},{"value":"golang","text":"Go","defaultCode":"func wiggleSort(nums []int)  {\n\n}"},{"value":"ruby","text":"Ruby","defaultCode":"# @param {Integer[]} nums\n# @return {Void} Do not return anything, modify nums in-place instead.\ndef wiggle_sort(nums)\n\nend"},{"value":"scala","text":"Scala","defaultCode":"object Solution {\n    def wiggleSort(nums: Array[Int]): Unit = {\n        \n    }\n}"},{"value":"rust","text":"Rust","defaultCode":"impl Solution {\n    pub fn wiggle_sort(nums: &mut Vec<i32>) {\n\n    }\n}"},{"value":"racket","text":"Racket","defaultCode":"(define/contract (wiggle-sort nums)\n  (-> (listof exact-integer?) void?)\n\n  )"}],"testcase":"[1,5,1,1,6,4]","testable":true,"templateMeta":{"name":"wiggleSort","params":[{"name":"nums","type":"integer[]"}],"return":{"type":"void"},"output":{"paramindex":0},"manual":false}}