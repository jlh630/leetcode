{"id":746,"fid":"745","name":"前缀和后缀搜索","slug":"prefix-and-suffix-search","link":"https://leetcode.cn/problems/prefix-and-suffix-search/description/","percent":43.77539894935078,"level":"Hard","category":"algorithms","en_name":"Prefix and Suffix Search","cn_name":"前缀和后缀搜索","totalAC":"26.5K","totalSubmit":"60.6K","likes":205,"dislikes":0,"desc":"<p>设计一个包含一些单词的特殊词典，并能够通过前缀和后缀来检索单词。</p>\n\n<p>实现 <code>WordFilter</code> 类：</p>\n\n<ul>\n\t<li><code>WordFilter(string[] words)</code> 使用词典中的单词 <code>words</code> 初始化对象。</li>\n\t<li><code>f(string pref, string suff)</code> 返回词典中具有前缀&nbsp;<code>pref</code>&nbsp;和后缀 <code>suff</code>&nbsp;的单词的下标。如果存在不止一个满足要求的下标，返回其中 <strong>最大的下标</strong> 。如果不存在这样的单词，返回 <code>-1</code> 。</li>\n</ul>\n\n<p>&nbsp;</p>\n\n<p><strong>示例：</strong></p>\n\n<pre>\n<strong>输入</strong>\n[\"WordFilter\", \"f\"]\n[[[\"apple\"]], [\"a\", \"e\"]]\n<strong>输出</strong>\n[null, 0]\n<strong>解释</strong>\nWordFilter wordFilter = new WordFilter([\"apple\"]);\nwordFilter.f(\"a\", \"e\"); // 返回 0 ，因为下标为 0 的单词：前缀 prefix = \"a\" 且 后缀 suffix = \"e\" 。\n</pre>\n&nbsp;\n\n<p><strong>提示：</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= words.length &lt;= 10<sup>4</sup></code></li>\n\t<li><code>1 &lt;= words[i].length &lt;= 7</code></li>\n\t<li><code>1 &lt;= pref.length, suff.length &lt;= 7</code></li>\n\t<li><code>words[i]</code>、<code>pref</code> 和 <code>suff</code> 仅由小写英文字母组成</li>\n\t<li>最多对函数 <code>f</code> 执行 <code>10<sup>4</sup></code> 次调用</li>\n</ul>\n","templates":[{"value":"cpp","text":"C++","defaultCode":"class WordFilter {\npublic:\n    WordFilter(vector<string>& words) {\n\n    }\n    \n    int f(string pref, string suff) {\n\n    }\n};\n\n/**\n * Your WordFilter object will be instantiated and called as such:\n * WordFilter* obj = new WordFilter(words);\n * int param_1 = obj->f(pref,suff);\n */"},{"value":"java","text":"Java","defaultCode":"class WordFilter {\n\n    public WordFilter(String[] words) {\n\n    }\n    \n    public int f(String pref, String suff) {\n\n    }\n}\n\n/**\n * Your WordFilter object will be instantiated and called as such:\n * WordFilter obj = new WordFilter(words);\n * int param_1 = obj.f(pref,suff);\n */"},{"value":"python","text":"Python","defaultCode":"class WordFilter(object):\n\n    def __init__(self, words):\n        \"\"\"\n        :type words: List[str]\n        \"\"\"\n\n\n    def f(self, pref, suff):\n        \"\"\"\n        :type pref: str\n        :type suff: str\n        :rtype: int\n        \"\"\"\n\n\n\n# Your WordFilter object will be instantiated and called as such:\n# obj = WordFilter(words)\n# param_1 = obj.f(pref,suff)"},{"value":"python3","text":"Python3","defaultCode":"class WordFilter:\n\n    def __init__(self, words: List[str]):\n\n\n    def f(self, pref: str, suff: str) -> int:\n\n\n\n# Your WordFilter object will be instantiated and called as such:\n# obj = WordFilter(words)\n# param_1 = obj.f(pref,suff)"},{"value":"c","text":"C","defaultCode":"\n\n\ntypedef struct {\n    \n} WordFilter;\n\n\nWordFilter* wordFilterCreate(char** words, int wordsSize) {\n    \n}\n\nint wordFilterF(WordFilter* obj, char* pref, char* suff) {\n    \n}\n\nvoid wordFilterFree(WordFilter* obj) {\n    \n}\n\n/**\n * Your WordFilter struct will be instantiated and called as such:\n * WordFilter* obj = wordFilterCreate(words, wordsSize);\n * int param_1 = wordFilterF(obj, pref, suff);\n \n * wordFilterFree(obj);\n*/"},{"value":"csharp","text":"C#","defaultCode":"public class WordFilter {\n\n    public WordFilter(string[] words) {\n\n    }\n    \n    public int F(string pref, string suff) {\n\n    }\n}\n\n/**\n * Your WordFilter object will be instantiated and called as such:\n * WordFilter obj = new WordFilter(words);\n * int param_1 = obj.F(pref,suff);\n */"},{"value":"javascript","text":"JavaScript","defaultCode":"/**\n * @param {string[]} words\n */\nvar WordFilter = function(words) {\n\n};\n\n/** \n * @param {string} pref \n * @param {string} suff\n * @return {number}\n */\nWordFilter.prototype.f = function(pref, suff) {\n\n};\n\n/**\n * Your WordFilter object will be instantiated and called as such:\n * var obj = new WordFilter(words)\n * var param_1 = obj.f(pref,suff)\n */"},{"value":"typescript","text":"TypeScript","defaultCode":"class WordFilter {\n    constructor(words: string[]) {\n        \n    }\n\n    f(pref: string, suff: string): number {\n        \n    }\n}\n\n/**\n * Your WordFilter object will be instantiated and called as such:\n * var obj = new WordFilter(words)\n * var param_1 = obj.f(pref,suff)\n */"},{"value":"php","text":"PHP","defaultCode":"class WordFilter {\n    /**\n     * @param String[] $words\n     */\n    function __construct($words) {\n\n    }\n\n    /**\n     * @param String $pref\n     * @param String $suff\n     * @return Integer\n     */\n    function f($pref, $suff) {\n\n    }\n}\n\n/**\n * Your WordFilter object will be instantiated and called as such:\n * $obj = WordFilter($words);\n * $ret_1 = $obj->f($pref, $suff);\n */"},{"value":"swift","text":"Swift","defaultCode":"\nclass WordFilter {\n\n    init(_ words: [String]) {\n\n    }\n    \n    func f(_ pref: String, _ suff: String) -> Int {\n\n    }\n}\n\n/**\n * Your WordFilter object will be instantiated and called as such:\n * let obj = WordFilter(words)\n * let ret_1: Int = obj.f(pref, suff)\n */"},{"value":"kotlin","text":"Kotlin","defaultCode":"class WordFilter(words: Array<String>) {\n\n    fun f(pref: String, suff: String): Int {\n\n    }\n\n}\n\n/**\n * Your WordFilter object will be instantiated and called as such:\n * var obj = WordFilter(words)\n * var param_1 = obj.f(pref,suff)\n */"},{"value":"dart","text":"Dart","defaultCode":"class WordFilter {\n\n  WordFilter(List<String> words) {\n    \n  }\n  \n  int f(String pref, String suff) {\n    \n  }\n}\n\n/**\n * Your WordFilter object will be instantiated and called as such:\n * WordFilter obj = WordFilter(words);\n * int param1 = obj.f(pref,suff);\n */"},{"value":"golang","text":"Go","defaultCode":"type WordFilter struct {\n\n}\n\n\nfunc Constructor(words []string) WordFilter {\n\n}\n\n\nfunc (this *WordFilter) F(pref string, suff string) int {\n\n}\n\n\n/**\n * Your WordFilter object will be instantiated and called as such:\n * obj := Constructor(words);\n * param_1 := obj.F(pref,suff);\n */"},{"value":"ruby","text":"Ruby","defaultCode":"class WordFilter\n\n=begin\n    :type words: String[]\n=end\n    def initialize(words)\n\n    end\n\n\n=begin\n    :type pref: String\n    :type suff: String\n    :rtype: Integer\n=end\n    def f(pref, suff)\n\n    end\n\n\nend\n\n# Your WordFilter object will be instantiated and called as such:\n# obj = WordFilter.new(words)\n# param_1 = obj.f(pref, suff)"},{"value":"scala","text":"Scala","defaultCode":"class WordFilter(_words: Array[String]) {\n\n    def f(pref: String, suff: String): Int = {\n        \n    }\n\n}\n\n/**\n * Your WordFilter object will be instantiated and called as such:\n * val obj = new WordFilter(words)\n * val param_1 = obj.f(pref,suff)\n */"},{"value":"rust","text":"Rust","defaultCode":"struct WordFilter {\n\n}\n\n\n/**\n * `&self` means the method takes an immutable reference.\n * If you need a mutable reference, change it to `&mut self` instead.\n */\nimpl WordFilter {\n\n    fn new(words: Vec<String>) -> Self {\n\n    }\n    \n    fn f(&self, pref: String, suff: String) -> i32 {\n\n    }\n}\n\n/**\n * Your WordFilter object will be instantiated and called as such:\n * let obj = WordFilter::new(words);\n * let ret_1: i32 = obj.f(pref, suff);\n */"},{"value":"racket","text":"Racket","defaultCode":"(define word-filter%\n  (class object%\n    (super-new)\n    \n    ; words : (listof string?)\n    (init-field\n      words)\n    \n    ; f : string? string? -> exact-integer?\n    (define/public (f pref suff)\n      )))\n\n;; Your word-filter% object will be instantiated and called as such:\n;; (define obj (new word-filter% [words words]))\n;; (define param_1 (send obj f pref suff))"},{"value":"erlang","text":"Erlang","defaultCode":"-spec word_filter_init_(Words :: [unicode:unicode_binary()]) -> any().\nword_filter_init_(Words) ->\n  .\n\n-spec word_filter_f(Pref :: unicode:unicode_binary(), Suff :: unicode:unicode_binary()) -> integer().\nword_filter_f(Pref, Suff) ->\n  .\n\n\n%% Your functions will be called as such:\n%% word_filter_init_(Words),\n%% Param_1 = word_filter_f(Pref, Suff),\n\n%% word_filter_init_ will be called before every test case, in which you can do some necessary initializations."},{"value":"elixir","text":"Elixir","defaultCode":"defmodule WordFilter do\n  @spec init_(words :: [String.t]) :: any\n  def init_(words) do\n    \n  end\n\n  @spec f(pref :: String.t, suff :: String.t) :: integer\n  def f(pref, suff) do\n    \n  end\nend\n\n# Your functions will be called as such:\n# WordFilter.init_(words)\n# param_1 = WordFilter.f(pref, suff)\n\n# WordFilter.init_ will be called before every test case, in which you can do some necessary initializations."},{"value":"cangjie","text":"Cangjie","defaultCode":"class WordFilter {\n    init(words: Array<String>) {\n\n    }\n    \n    func f(pref: String, suff: String): Int64 {\n\n    }\n}\n\n/**\n * Your WordFilter object will be instantiated and called as such:\n * let obj: WordFilter = WordFilter(words)\n * let param_1 = obj.f(pref,suff)\n */"}],"testcase":"[\"WordFilter\",\"f\"]\n[[[\"apple\"]],[\"a\",\"e\"]]","testable":true,"templateMeta":{"classname":"WordFilter","constructor":{"params":[{"type":"string[]","name":"words"}]},"methods":[{"name":"f","params":[{"type":"string","name":"pref"},{"type":"string","name":"suff"}],"return":{"type":"integer"}}],"systemdesign":true,"params":[{"name":"inputs","type":"integer[]"},{"name":"inputs","type":"integer[]"}],"return":{"type":"list<String>","dealloc":true}}}