{"id":179,"fid":"179","name":"最大数","slug":"largest-number","link":"https://leetcode.cn/problems/largest-number/description/","percent":41.13177112098818,"level":"Medium","category":"algorithms","en_name":"Largest Number","cn_name":"最大数","totalAC":"235.4K","totalSubmit":"572.1K","likes":1278,"dislikes":0,"desc":"<p>给定一组非负整数 <code>nums</code>，重新排列每个数的顺序（每个数不可拆分）使之组成一个最大的整数。</p>\n\n<p><strong>注意：</strong>输出结果可能非常大，所以你需要返回一个字符串而不是整数。</p>\n\n<p>&nbsp;</p>\n\n<p><strong>示例 1：</strong></p>\n\n<pre>\n<strong>输入<code>：</code></strong><code>nums = [10,2]</code>\n<strong>输出：</strong><code>\"210\"</code></pre>\n\n<p><strong>示例&nbsp;2：</strong></p>\n\n<pre>\n<strong>输入<code>：</code></strong><code>nums = [3,30,34,5,9]</code>\n<strong>输出：</strong><code>\"9534330\"</code>\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= nums.length &lt;= 100</code></li>\n\t<li><code>0 &lt;= nums[i] &lt;= 10<sup>9</sup></code></li>\n</ul>\n","templates":[{"value":"cpp","text":"C++","defaultCode":"class Solution {\npublic:\n    string largestNumber(vector<int>& nums) {\n\n    }\n};"},{"value":"java","text":"Java","defaultCode":"class Solution {\n    public String largestNumber(int[] nums) {\n\n    }\n}"},{"value":"python","text":"Python","defaultCode":"class Solution(object):\n    def largestNumber(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: str\n        \"\"\""},{"value":"python3","text":"Python3","defaultCode":"class Solution:\n    def largestNumber(self, nums: List[int]) -> str:"},{"value":"c","text":"C","defaultCode":"char* largestNumber(int* nums, int numsSize) {\n    \n}"},{"value":"csharp","text":"C#","defaultCode":"public class Solution {\n    public string LargestNumber(int[] nums) {\n\n    }\n}"},{"value":"javascript","text":"JavaScript","defaultCode":"/**\n * @param {number[]} nums\n * @return {string}\n */\nvar largestNumber = function(nums) {\n\n};"},{"value":"typescript","text":"TypeScript","defaultCode":"function largestNumber(nums: number[]): string {\n    \n};"},{"value":"php","text":"PHP","defaultCode":"class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @return String\n     */\n    function largestNumber($nums) {\n\n    }\n}"},{"value":"swift","text":"Swift","defaultCode":"class Solution {\n    func largestNumber(_ nums: [Int]) -> String {\n\n    }\n}"},{"value":"kotlin","text":"Kotlin","defaultCode":"class Solution {\n    fun largestNumber(nums: IntArray): String {\n\n    }\n}"},{"value":"dart","text":"Dart","defaultCode":"class Solution {\n  String largestNumber(List<int> nums) {\n    \n  }\n}"},{"value":"golang","text":"Go","defaultCode":"func largestNumber(nums []int) string {\n\n}"},{"value":"ruby","text":"Ruby","defaultCode":"# @param {Integer[]} nums\n# @return {String}\ndef largest_number(nums)\n\nend"},{"value":"scala","text":"Scala","defaultCode":"object Solution {\n    def largestNumber(nums: Array[Int]): String = {\n\n    }\n}"},{"value":"rust","text":"Rust","defaultCode":"impl Solution {\n    pub fn largest_number(nums: Vec<i32>) -> String {\n\n    }\n}"},{"value":"racket","text":"Racket","defaultCode":"(define/contract (largest-number nums)\n  (-> (listof exact-integer?) string?)\n  )"},{"value":"erlang","text":"Erlang","defaultCode":"-spec largest_number(Nums :: [integer()]) -> unicode:unicode_binary().\nlargest_number(Nums) ->\n  ."},{"value":"elixir","text":"Elixir","defaultCode":"defmodule Solution do\n  @spec largest_number(nums :: [integer]) :: String.t\n  def largest_number(nums) do\n    \n  end\nend"}],"testcase":"[10,2]","testable":true,"templateMeta":{"name":"largestNumber","params":[{"name":"nums","type":"integer[]"}],"return":{"type":"string"}}}