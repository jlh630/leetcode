{"id":190,"fid":"190","name":"颠倒二进制位","slug":"reverse-bits","link":"https://leetcode.cn/problems/reverse-bits/description/","percent":72.98377222928028,"level":"Easy","category":"algorithms","en_name":"Reverse Bits","cn_name":"颠倒二进制位","totalAC":"256.4K","totalSubmit":"350.6K","likes":711,"dislikes":0,"desc":"<p>颠倒给定的 32 位无符号整数的二进制位。</p>\n\n<p><strong>提示：</strong></p>\n\n<ul>\n\t<li>请注意，在某些语言（如 Java）中，没有无符号整数类型。在这种情况下，输入和输出都将被指定为有符号整数类型，并且不应影响您的实现，因为无论整数是有符号的还是无符号的，其内部的二进制表示形式都是相同的。</li>\n\t<li>在 Java 中，编译器使用<a href=\"https://baike.baidu.com/item/二进制补码/5295284\" target=\"_blank\">二进制补码</a>记法来表示有符号整数。因此，在 <strong>示例 2</strong>&nbsp;中，输入表示有符号整数 <code>-3</code>，输出表示有符号整数 <code>-1073741825</code>。</li>\n</ul>\n\n<p>&nbsp;</p>\n\n<p><strong>示例 1：</strong></p>\n\n<pre>\n<strong>输入：</strong>n = 00000010100101000001111010011100\n<strong>输出：</strong>964176192 (00111001011110000010100101000000)\n<strong>解释：</strong>输入的二进制串 <strong>00000010100101000001111010011100 </strong>表示无符号整数<strong> 43261596</strong><strong>，\n    </strong> 因此返回 964176192，其二进制表示形式为 <strong>00111001011110000010100101000000</strong>。</pre>\n\n<p><strong>示例 2：</strong></p>\n\n<pre>\n<strong>输入：</strong>n = 11111111111111111111111111111101\n<strong>输出：</strong>3221225471 (10111111111111111111111111111111)\n<strong>解释：</strong>输入的二进制串 <strong>11111111111111111111111111111101</strong> 表示无符号整数 4294967293，\n   &nbsp; 因此返回 3221225471 其二进制表示形式为 <strong>10111111111111111111111111111111 。</strong></pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ul>\n\t<li>输入是一个长度为 <code>32</code> 的二进制字符串</li>\n</ul>\n\n<p>&nbsp;</p>\n\n<p><strong>进阶</strong>: 如果多次调用这个函数，你将如何优化你的算法？</p>\n","templates":[{"value":"cpp","text":"C++","defaultCode":"class Solution {\npublic:\n    uint32_t reverseBits(uint32_t n) {\n        \n    }\n};"},{"value":"java","text":"Java","defaultCode":"public class Solution {\n    // you need treat n as an unsigned value\n    public int reverseBits(int n) {\n        \n    }\n}"},{"value":"python","text":"Python","defaultCode":"class Solution:\n    # @param n, an integer\n    # @return an integer\n    def reverseBits(self, n):\n        "},{"value":"python3","text":"Python3","defaultCode":"class Solution:\n    def reverseBits(self, n: int) -> int:\n        "},{"value":"c","text":"C","defaultCode":"uint32_t reverseBits(uint32_t n) {\n    \n}"},{"value":"csharp","text":"C#","defaultCode":"public class Solution {\n    public uint reverseBits(uint n) {\n        \n    }\n}"},{"value":"javascript","text":"JavaScript","defaultCode":"/**\n * @param {number} n - a positive integer\n * @return {number} - a positive integer\n */\nvar reverseBits = function(n) {\n    \n};"},{"value":"typescript","text":"TypeScript","defaultCode":"function reverseBits(n: number): number {\n\t\n};"},{"value":"php","text":"PHP","defaultCode":"class Solution {\n    /**\n     * @param Integer $n\n     * @return Integer\n     */\n    function reverseBits($n) {\n        \n    }\n}"},{"value":"swift","text":"Swift","defaultCode":"class Solution {\n    func reverseBits(_ n: Int) -> Int {\n        \n    }\n}"},{"value":"kotlin","text":"Kotlin","defaultCode":"class Solution {\n    // you need treat n as an unsigned value\n    fun reverseBits(n:Int):Int {\n        \n    }\n}"},{"value":"golang","text":"Go","defaultCode":"func reverseBits(num uint32) uint32 {\n    \n}"},{"value":"ruby","text":"Ruby","defaultCode":"# @param {Integer} n, a positive integer\n# @return {Integer}\ndef reverse_bits(n)\n    \nend"},{"value":"scala","text":"Scala","defaultCode":"object Solution {\n    // you need treat n as an unsigned value\n    def reverseBits(x: Int): Int = {\n        \n    }\n}"},{"value":"rust","text":"Rust","defaultCode":"impl Solution {\n    pub fn reverse_bits(x: u32) -> u32 {\n        \n    }\n}"}],"testcase":"00000010100101000001111010011100","testable":true,"templateMeta":{"name":"reverseBits","params":[{"name":"n","type":"string"}],"return":{"type":"integer"},"manual":true}}