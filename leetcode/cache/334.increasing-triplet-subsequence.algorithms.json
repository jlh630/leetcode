{"id":334,"fid":"334","name":"递增的三元子序列","slug":"increasing-triplet-subsequence","link":"https://leetcode.cn/problems/increasing-triplet-subsequence/description/","percent":42.74635374758679,"level":"Medium","category":"algorithms","en_name":"Increasing Triplet Subsequence","cn_name":"递增的三元子序列","totalAC":"156.5K","totalSubmit":"366.2K","likes":841,"dislikes":0,"desc":"<p>给你一个整数数组&nbsp;<code>nums</code> ，判断这个数组中是否存在长度为 <code>3</code> 的递增子序列。</p>\n\n<p>如果存在这样的三元组下标 <code>(i, j, k)</code>&nbsp;且满足 <code>i &lt; j &lt; k</code> ，使得&nbsp;<code>nums[i] &lt; nums[j] &lt; nums[k]</code> ，返回 <code>true</code> ；否则，返回 <code>false</code> 。</p>\n\n<p>&nbsp;</p>\n\n<p><strong>示例 1：</strong></p>\n\n<pre>\n<strong>输入：</strong>nums = [1,2,3,4,5]\n<strong>输出：</strong>true\n<strong>解释：</strong>任何 i &lt; j &lt; k 的三元组都满足题意\n</pre>\n\n<p><strong>示例 2：</strong></p>\n\n<pre>\n<strong>输入：</strong>nums = [5,4,3,2,1]\n<strong>输出：</strong>false\n<strong>解释：</strong>不存在满足题意的三元组</pre>\n\n<p><strong>示例 3：</strong></p>\n\n<pre>\n<strong>输入：</strong>nums = [2,1,5,0,4,6]\n<strong>输出：</strong>true\n<strong>解释：</strong>三元组 (3, 4, 5) 满足题意，因为 nums[3] == 0 &lt; nums[4] == 4 &lt; nums[5] == 6\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= nums.length &lt;= 5 * 10<sup>5</sup></code></li>\n\t<li><code>-2<sup>31</sup> &lt;= nums[i] &lt;= 2<sup>31</sup> - 1</code></li>\n</ul>\n\n<p>&nbsp;</p>\n\n<p><strong>进阶：</strong>你能实现时间复杂度为 <code>O(n)</code> ，空间复杂度为 <code>O(1)</code> 的解决方案吗？</p>\n","templates":[{"value":"cpp","text":"C++","defaultCode":"class Solution {\npublic:\n    bool increasingTriplet(vector<int>& nums) {\n\n    }\n};"},{"value":"java","text":"Java","defaultCode":"class Solution {\n    public boolean increasingTriplet(int[] nums) {\n\n    }\n}"},{"value":"python","text":"Python","defaultCode":"class Solution(object):\n    def increasingTriplet(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: bool\n        \"\"\""},{"value":"python3","text":"Python3","defaultCode":"class Solution:\n    def increasingTriplet(self, nums: List[int]) -> bool:"},{"value":"c","text":"C","defaultCode":"bool increasingTriplet(int* nums, int numsSize) {\n    \n}"},{"value":"csharp","text":"C#","defaultCode":"public class Solution {\n    public bool IncreasingTriplet(int[] nums) {\n\n    }\n}"},{"value":"javascript","text":"JavaScript","defaultCode":"/**\n * @param {number[]} nums\n * @return {boolean}\n */\nvar increasingTriplet = function(nums) {\n\n};"},{"value":"typescript","text":"TypeScript","defaultCode":"function increasingTriplet(nums: number[]): boolean {\n    \n};"},{"value":"php","text":"PHP","defaultCode":"class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @return Boolean\n     */\n    function increasingTriplet($nums) {\n\n    }\n}"},{"value":"swift","text":"Swift","defaultCode":"class Solution {\n    func increasingTriplet(_ nums: [Int]) -> Bool {\n\n    }\n}"},{"value":"kotlin","text":"Kotlin","defaultCode":"class Solution {\n    fun increasingTriplet(nums: IntArray): Boolean {\n\n    }\n}"},{"value":"dart","text":"Dart","defaultCode":"class Solution {\n  bool increasingTriplet(List<int> nums) {\n    \n  }\n}"},{"value":"golang","text":"Go","defaultCode":"func increasingTriplet(nums []int) bool {\n\n}"},{"value":"ruby","text":"Ruby","defaultCode":"# @param {Integer[]} nums\n# @return {Boolean}\ndef increasing_triplet(nums)\n    \nend"},{"value":"scala","text":"Scala","defaultCode":"object Solution {\n    def increasingTriplet(nums: Array[Int]): Boolean = {\n        \n    }\n}"},{"value":"rust","text":"Rust","defaultCode":"impl Solution {\n    pub fn increasing_triplet(nums: Vec<i32>) -> bool {\n\n    }\n}"},{"value":"racket","text":"Racket","defaultCode":"(define/contract (increasing-triplet nums)\n  (-> (listof exact-integer?) boolean?)\n  )"},{"value":"erlang","text":"Erlang","defaultCode":"-spec increasing_triplet(Nums :: [integer()]) -> boolean().\nincreasing_triplet(Nums) ->\n  ."},{"value":"elixir","text":"Elixir","defaultCode":"defmodule Solution do\n  @spec increasing_triplet(nums :: [integer]) :: boolean\n  def increasing_triplet(nums) do\n    \n  end\nend"}],"testcase":"[1,2,3,4,5]","testable":true,"templateMeta":{"name":"increasingTriplet","params":[{"name":"nums","type":"integer[]"}],"return":{"type":"boolean"}}}