{"id":120,"fid":"120","name":"三角形最小路径和","slug":"triangle","link":"https://leetcode.cn/problems/triangle/description/","percent":68.90138602314524,"level":"Medium","category":"algorithms","en_name":"Triangle","cn_name":"三角形最小路径和","totalAC":"368.7K","totalSubmit":"535.1K","likes":1359,"dislikes":0,"desc":"<p>给定一个三角形 <code>triangle</code> ，找出自顶向下的最小路径和。</p>\n\n<p>每一步只能移动到下一行中相邻的结点上。<strong>相邻的结点 </strong>在这里指的是 <strong>下标</strong> 与 <strong>上一层结点下标</strong> 相同或者等于 <strong>上一层结点下标 + 1</strong> 的两个结点。也就是说，如果正位于当前行的下标 <code>i</code> ，那么下一步可以移动到下一行的下标 <code>i</code> 或 <code>i + 1</code> 。</p>\n\n<p> </p>\n\n<p><strong>示例 1：</strong></p>\n\n<pre>\n<strong>输入：</strong>triangle = [[2],[3,4],[6,5,7],[4,1,8,3]]\n<strong>输出：</strong>11\n<strong>解释：</strong>如下面简图所示：\n   <strong>2</strong>\n  <strong>3</strong> 4\n 6 <strong>5</strong> 7\n4 <strong>1</strong> 8 3\n自顶向下的最小路径和为 11（即，2 + 3 + 5 + 1 = 11）。\n</pre>\n\n<p><strong>示例 2：</strong></p>\n\n<pre>\n<strong>输入：</strong>triangle = [[-10]]\n<strong>输出：</strong>-10\n</pre>\n\n<p> </p>\n\n<p><strong>提示：</strong></p>\n\n<ul>\n\t<li><code>1 <= triangle.length <= 200</code></li>\n\t<li><code>triangle[0].length == 1</code></li>\n\t<li><code>triangle[i].length == triangle[i - 1].length + 1</code></li>\n\t<li><code>-10<sup>4</sup> <= triangle[i][j] <= 10<sup>4</sup></code></li>\n</ul>\n\n<p> </p>\n\n<p><strong>进阶：</strong></p>\n\n<ul>\n\t<li>你可以只使用 <code>O(n)</code> 的额外空间（<code>n</code> 为三角形的总行数）来解决这个问题吗？</li>\n</ul>\n","templates":[{"value":"cpp","text":"C++","defaultCode":"class Solution {\npublic:\n    int minimumTotal(vector<vector<int>>& triangle) {\n\n    }\n};"},{"value":"java","text":"Java","defaultCode":"class Solution {\n    public int minimumTotal(List<List<Integer>> triangle) {\n\n    }\n}"},{"value":"python","text":"Python","defaultCode":"class Solution(object):\n    def minimumTotal(self, triangle):\n        \"\"\"\n        :type triangle: List[List[int]]\n        :rtype: int\n        \"\"\""},{"value":"python3","text":"Python3","defaultCode":"class Solution:\n    def minimumTotal(self, triangle: List[List[int]]) -> int:"},{"value":"c","text":"C","defaultCode":"int minimumTotal(int** triangle, int triangleSize, int* triangleColSize) {\n    \n}"},{"value":"csharp","text":"C#","defaultCode":"public class Solution {\n    public int MinimumTotal(IList<IList<int>> triangle) {\n\n    }\n}"},{"value":"javascript","text":"JavaScript","defaultCode":"/**\n * @param {number[][]} triangle\n * @return {number}\n */\nvar minimumTotal = function(triangle) {\n\n};"},{"value":"typescript","text":"TypeScript","defaultCode":"function minimumTotal(triangle: number[][]): number {\n    \n};"},{"value":"php","text":"PHP","defaultCode":"class Solution {\n\n    /**\n     * @param Integer[][] $triangle\n     * @return Integer\n     */\n    function minimumTotal($triangle) {\n\n    }\n}"},{"value":"swift","text":"Swift","defaultCode":"class Solution {\n    func minimumTotal(_ triangle: [[Int]]) -> Int {\n\n    }\n}"},{"value":"kotlin","text":"Kotlin","defaultCode":"class Solution {\n    fun minimumTotal(triangle: List<List<Int>>): Int {\n\n    }\n}"},{"value":"dart","text":"Dart","defaultCode":"class Solution {\n  int minimumTotal(List<List<int>> triangle) {\n    \n  }\n}"},{"value":"golang","text":"Go","defaultCode":"func minimumTotal(triangle [][]int) int {\n\n}"},{"value":"ruby","text":"Ruby","defaultCode":"# @param {Integer[][]} triangle\n# @return {Integer}\ndef minimum_total(triangle)\n\nend"},{"value":"scala","text":"Scala","defaultCode":"object Solution {\n    def minimumTotal(triangle: List[List[Int]]): Int = {\n        \n    }\n}"},{"value":"rust","text":"Rust","defaultCode":"impl Solution {\n    pub fn minimum_total(triangle: Vec<Vec<i32>>) -> i32 {\n\n    }\n}"},{"value":"racket","text":"Racket","defaultCode":"(define/contract (minimum-total triangle)\n  (-> (listof (listof exact-integer?)) exact-integer?)\n  )"},{"value":"erlang","text":"Erlang","defaultCode":"-spec minimum_total(Triangle :: [[integer()]]) -> integer().\nminimum_total(Triangle) ->\n  ."},{"value":"elixir","text":"Elixir","defaultCode":"defmodule Solution do\n  @spec minimum_total(triangle :: [[integer]]) :: integer\n  def minimum_total(triangle) do\n    \n  end\nend"}],"testcase":"[[2],[3,4],[6,5,7],[4,1,8,3]]","testable":true,"templateMeta":{"name":"minimumTotal","params":[{"name":"triangle","type":"list<list<integer>>"}],"return":{"type":"integer"}}}